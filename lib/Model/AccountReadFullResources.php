<?php
/**
 * AccountReadFullResources
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tracmap
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TracMap API
 *
 * The TracMap API allows you to create and manage __Jobs__, __Products__, and __Maps__ on TracMap Online.
 *
 * OpenAPI spec version: 1.0.25
 * Contact: api@tracmap.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tracmap\Model;

use \ArrayAccess;
use \Tracmap\ObjectSerializer;

/**
 * AccountReadFullResources Class Doc Comment
 *
 * @category Class
 * @package  Tracmap
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountReadFullResources implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Account_Read_Full_resources';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contractorId' => 'int',
        'contractorName' => 'string',
        'contractorPhone' => 'string',
        'contractorOptIn' => 'bool',
        'jobsUrl' => 'string',
        'productsUrl' => 'string',
        'mapUrl' => 'string',
        'vehiclesUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contractorId' => null,
        'contractorName' => null,
        'contractorPhone' => null,
        'contractorOptIn' => null,
        'jobsUrl' => 'url',
        'productsUrl' => 'url',
        'mapUrl' => 'url',
        'vehiclesUrl' => 'url'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contractorId' => 'contractor_id',
        'contractorName' => 'contractor_name',
        'contractorPhone' => 'contractor_phone',
        'contractorOptIn' => 'contractor_opt_in',
        'jobsUrl' => 'jobs_url',
        'productsUrl' => 'products_url',
        'mapUrl' => 'map_url',
        'vehiclesUrl' => 'vehicles_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contractorId' => 'setContractorId',
        'contractorName' => 'setContractorName',
        'contractorPhone' => 'setContractorPhone',
        'contractorOptIn' => 'setContractorOptIn',
        'jobsUrl' => 'setJobsUrl',
        'productsUrl' => 'setProductsUrl',
        'mapUrl' => 'setMapUrl',
        'vehiclesUrl' => 'setVehiclesUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contractorId' => 'getContractorId',
        'contractorName' => 'getContractorName',
        'contractorPhone' => 'getContractorPhone',
        'contractorOptIn' => 'getContractorOptIn',
        'jobsUrl' => 'getJobsUrl',
        'productsUrl' => 'getProductsUrl',
        'mapUrl' => 'getMapUrl',
        'vehiclesUrl' => 'getVehiclesUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contractorId'] = isset($data['contractorId']) ? $data['contractorId'] : null;
        $this->container['contractorName'] = isset($data['contractorName']) ? $data['contractorName'] : null;
        $this->container['contractorPhone'] = isset($data['contractorPhone']) ? $data['contractorPhone'] : null;
        $this->container['contractorOptIn'] = isset($data['contractorOptIn']) ? $data['contractorOptIn'] : null;
        $this->container['jobsUrl'] = isset($data['jobsUrl']) ? $data['jobsUrl'] : null;
        $this->container['productsUrl'] = isset($data['productsUrl']) ? $data['productsUrl'] : null;
        $this->container['mapUrl'] = isset($data['mapUrl']) ? $data['mapUrl'] : null;
        $this->container['vehiclesUrl'] = isset($data['vehiclesUrl']) ? $data['vehiclesUrl'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contractorId
     *
     * @return int
     */
    public function getContractorId()
    {
        return $this->container['contractorId'];
    }

    /**
     * Sets contractorId
     *
     * @param int $contractorId If available, the account identifier of the account's default contractor.
     *
     * @return $this
     */
    public function setContractorId($contractorId)
    {
        $this->container['contractorId'] = $contractorId;

        return $this;
    }

    /**
     * Gets contractorName
     *
     * @return string
     */
    public function getContractorName()
    {
        return $this->container['contractorName'];
    }

    /**
     * Sets contractorName
     *
     * @param string $contractorName If available, the name of the account's default contractor.
     *
     * @return $this
     */
    public function setContractorName($contractorName)
    {
        $this->container['contractorName'] = $contractorName;

        return $this;
    }

    /**
     * Gets contractorPhone
     *
     * @return string
     */
    public function getContractorPhone()
    {
        return $this->container['contractorPhone'];
    }

    /**
     * Sets contractorPhone
     *
     * @param string $contractorPhone If available, the formatted phone number associated with the account's default contractor.
     *
     * @return $this
     */
    public function setContractorPhone($contractorPhone)
    {
        $this->container['contractorPhone'] = $contractorPhone;

        return $this;
    }

    /**
     * Gets contractorOptIn
     *
     * @return bool
     */
    public function getContractorOptIn()
    {
        return $this->container['contractorOptIn'];
    }

    /**
     * Sets contractorOptIn
     *
     * @param bool $contractorOptIn If available, a value indicating whether the contractor has opted in to data sharing. If this value is FALSE, then job details will not be accessible via the API.
     *
     * @return $this
     */
    public function setContractorOptIn($contractorOptIn)
    {
        $this->container['contractorOptIn'] = $contractorOptIn;

        return $this;
    }

    /**
     * Gets jobsUrl
     *
     * @return string
     */
    public function getJobsUrl()
    {
        return $this->container['jobsUrl'];
    }

    /**
     * Sets jobsUrl
     *
     * @param string $jobsUrl jobsUrl
     *
     * @return $this
     */
    public function setJobsUrl($jobsUrl)
    {
        $this->container['jobsUrl'] = $jobsUrl;

        return $this;
    }

    /**
     * Gets productsUrl
     *
     * @return string
     */
    public function getProductsUrl()
    {
        return $this->container['productsUrl'];
    }

    /**
     * Sets productsUrl
     *
     * @param string $productsUrl productsUrl
     *
     * @return $this
     */
    public function setProductsUrl($productsUrl)
    {
        $this->container['productsUrl'] = $productsUrl;

        return $this;
    }

    /**
     * Gets mapUrl
     *
     * @return string
     */
    public function getMapUrl()
    {
        return $this->container['mapUrl'];
    }

    /**
     * Sets mapUrl
     *
     * @param string $mapUrl mapUrl
     *
     * @return $this
     */
    public function setMapUrl($mapUrl)
    {
        $this->container['mapUrl'] = $mapUrl;

        return $this;
    }

    /**
     * Gets vehiclesUrl
     *
     * @return string
     */
    public function getVehiclesUrl()
    {
        return $this->container['vehiclesUrl'];
    }

    /**
     * Sets vehiclesUrl
     *
     * @param string $vehiclesUrl vehiclesUrl
     *
     * @return $this
     */
    public function setVehiclesUrl($vehiclesUrl)
    {
        $this->container['vehiclesUrl'] = $vehiclesUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


