<?php
/**
 * JobWrite
 *
 * PHP version 5
 *
 * @category Class
 * @package  Tracmap
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TracMap API
 *
 * The TracMap API allows you to create and manage __Jobs__, __Products__, and __Maps__ on TracMap Online.
 *
 * OpenAPI spec version: 1.0.25
 * Contact: api@tracmap.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tracmap\Model;
use \Tracmap\ObjectSerializer;

/**
 * JobWrite Class Doc Comment
 *
 * @category Class
 * @package  Tracmap
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JobWrite extends JobBase 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Job_Write';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'geometry' => '\Tracmap\Model\GeoJSONFeatureList',
        'productRates' => '\Tracmap\Model\ProductRateList',
        'customerId' => 'int',
        'contractorId' => 'int',
        'customerName' => 'string',
        'originSupplier' => 'string',
        'originReference' => 'string',
        'orderSubtypeId' => 'int',
        'dueDate' => 'string',
        'dueDate2' => 'string',
        'waterRate' => 'float',
        'tankSize' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'geometry' => null,
        'productRates' => null,
        'customerId' => null,
        'contractorId' => null,
        'customerName' => null,
        'originSupplier' => null,
        'originReference' => null,
        'orderSubtypeId' => null,
        'dueDate' => null,
        'dueDate2' => null,
        'waterRate' => null,
        'tankSize' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'geometry' => 'geometry',
        'productRates' => 'product_rates',
        'customerId' => 'customer_id',
        'contractorId' => 'contractor_id',
        'customerName' => 'customer_name',
        'originSupplier' => 'origin_supplier',
        'originReference' => 'origin_reference',
        'orderSubtypeId' => 'order_subtype_id',
        'dueDate' => 'due_date',
        'dueDate2' => 'due_date2',
        'waterRate' => 'water_rate',
        'tankSize' => 'tank_size'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'geometry' => 'setGeometry',
        'productRates' => 'setProductRates',
        'customerId' => 'setCustomerId',
        'contractorId' => 'setContractorId',
        'customerName' => 'setCustomerName',
        'originSupplier' => 'setOriginSupplier',
        'originReference' => 'setOriginReference',
        'orderSubtypeId' => 'setOrderSubtypeId',
        'dueDate' => 'setDueDate',
        'dueDate2' => 'setDueDate2',
        'waterRate' => 'setWaterRate',
        'tankSize' => 'setTankSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'geometry' => 'getGeometry',
        'productRates' => 'getProductRates',
        'customerId' => 'getCustomerId',
        'contractorId' => 'getContractorId',
        'customerName' => 'getCustomerName',
        'originSupplier' => 'getOriginSupplier',
        'originReference' => 'getOriginReference',
        'orderSubtypeId' => 'getOrderSubtypeId',
        'dueDate' => 'getDueDate',
        'dueDate2' => 'getDueDate2',
        'waterRate' => 'getWaterRate',
        'tankSize' => 'getTankSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['geometry'] = isset($data['geometry']) ? $data['geometry'] : null;
        $this->container['productRates'] = isset($data['productRates']) ? $data['productRates'] : null;
        $this->container['customerId'] = isset($data['customerId']) ? $data['customerId'] : null;
        $this->container['contractorId'] = isset($data['contractorId']) ? $data['contractorId'] : null;
        $this->container['customerName'] = isset($data['customerName']) ? $data['customerName'] : null;
        $this->container['originSupplier'] = isset($data['originSupplier']) ? $data['originSupplier'] : null;
        $this->container['originReference'] = isset($data['originReference']) ? $data['originReference'] : null;
        $this->container['orderSubtypeId'] = isset($data['orderSubtypeId']) ? $data['orderSubtypeId'] : null;
        $this->container['dueDate'] = isset($data['dueDate']) ? $data['dueDate'] : null;
        $this->container['dueDate2'] = isset($data['dueDate2']) ? $data['dueDate2'] : null;
        $this->container['waterRate'] = isset($data['waterRate']) ? $data['waterRate'] : null;
        $this->container['tankSize'] = isset($data['tankSize']) ? $data['tankSize'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets geometry
     *
     * @return \Tracmap\Model\GeoJSONFeatureList
     */
    public function getGeometry()
    {
        return $this->container['geometry'];
    }

    /**
     * Sets geometry
     *
     * @param \Tracmap\Model\GeoJSONFeatureList $geometry geometry
     *
     * @return $this
     */
    public function setGeometry($geometry)
    {
        $this->container['geometry'] = $geometry;

        return $this;
    }

    /**
     * Gets productRates
     *
     * @return \Tracmap\Model\ProductRateList
     */
    public function getProductRates()
    {
        return $this->container['productRates'];
    }

    /**
     * Sets productRates
     *
     * @param \Tracmap\Model\ProductRateList $productRates productRates
     *
     * @return $this
     */
    public function setProductRates($productRates)
    {
        $this->container['productRates'] = $productRates;

        return $this;
    }

    /**
     * Gets customerId
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId
     *
     * @param int $customerId customerId
     *
     * @return $this
     */
    public function setCustomerId($customerId)
    {
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets contractorId
     *
     * @return int
     */
    public function getContractorId()
    {
        return $this->container['contractorId'];
    }

    /**
     * Sets contractorId
     *
     * @param int $contractorId contractorId
     *
     * @return $this
     */
    public function setContractorId($contractorId)
    {
        $this->container['contractorId'] = $contractorId;

        return $this;
    }

    /**
     * Gets customerName
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customerName'];
    }

    /**
     * Sets customerName
     *
     * @param string $customerName customerName
     *
     * @return $this
     */
    public function setCustomerName($customerName)
    {
        $this->container['customerName'] = $customerName;

        return $this;
    }

    /**
     * Gets originSupplier
     *
     * @return string
     */
    public function getOriginSupplier()
    {
        return $this->container['originSupplier'];
    }

    /**
     * Sets originSupplier
     *
     * @param string $originSupplier originSupplier
     *
     * @return $this
     */
    public function setOriginSupplier($originSupplier)
    {
        $this->container['originSupplier'] = $originSupplier;

        return $this;
    }

    /**
     * Gets originReference
     *
     * @return string
     */
    public function getOriginReference()
    {
        return $this->container['originReference'];
    }

    /**
     * Sets originReference
     *
     * @param string $originReference originReference
     *
     * @return $this
     */
    public function setOriginReference($originReference)
    {
        $this->container['originReference'] = $originReference;

        return $this;
    }

    /**
     * Gets orderSubtypeId
     *
     * @return int
     */
    public function getOrderSubtypeId()
    {
        return $this->container['orderSubtypeId'];
    }

    /**
     * Sets orderSubtypeId
     *
     * @param int $orderSubtypeId Identifier of activity (order subtype) to use. The available activities can be retrieved via the `subtypes` call. If a spray order with `water_rate` but without `order_subtype_id` is submitted, a Spray type activity will be created for the order.
     *
     * @return $this
     */
    public function setOrderSubtypeId($orderSubtypeId)
    {
        $this->container['orderSubtypeId'] = $orderSubtypeId;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return string
     */
    public function getDueDate()
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param string $dueDate A proposed order start date (contractors should start the order after this timestamp). Timezone info is optional.
     *
     * @return $this
     */
    public function setDueDate($dueDate)
    {
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets dueDate2
     *
     * @return string
     */
    public function getDueDate2()
    {
        return $this->container['dueDate2'];
    }

    /**
     * Sets dueDate2
     *
     * @param string $dueDate2 A proposed order end date (contractors should finish the order before this timestamp). Timezone info is optional.
     *
     * @return $this
     */
    public function setDueDate2($dueDate2)
    {
        $this->container['dueDate2'] = $dueDate2;

        return $this;
    }

    /**
     * Gets waterRate
     *
     * @return float
     */
    public function getWaterRate()
    {
        return $this->container['waterRate'];
    }

    /**
     * Sets waterRate
     *
     * @param float $waterRate If provided, the rate of water, in L/ha (or gal/ac), to be applied. If this value is provided, then the job is submitted as a spray job.
     *
     * @return $this
     */
    public function setWaterRate($waterRate)
    {
        $this->container['waterRate'] = $waterRate;

        return $this;
    }

    /**
     * Gets tankSize
     *
     * @return float
     */
    public function getTankSize()
    {
        return $this->container['tankSize'];
    }

    /**
     * Sets tankSize
     *
     * @param float $tankSize In a spray job, the size of the tank used. The value is optional.
     *
     * @return $this
     */
    public function setTankSize($tankSize)
    {
        $this->container['tankSize'] = $tankSize;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


