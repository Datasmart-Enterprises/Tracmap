<?php
/**
 * ProductApi
 * PHP version 5
 *
 * @category Class
 * @package  Tracmap
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TracMap API
 *
 * The TracMap API allows you to create and manage __Jobs__, __Products__, and __Maps__ on TracMap Online.
 *
 * OpenAPI spec version: 1.0.25
 * Contact: api@tracmap.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tracmap\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Tracmap\ApiException;
use Tracmap\Configuration;
use Tracmap\HeaderSelector;
use Tracmap\ObjectSerializer;

/**
 * ProductApi Class Doc Comment
 *
 * @category Class
 * @package  Tracmap
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountsAccountIdProductsGet
     *
     * Information about all available products, optionally filtered.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  string $name Return only products whose name contains this string. (optional)
     * @param  string $vendor Return only products who are from a vendor/supplier (optional)
     * @param  string $sku Return only products whose have this unique identifier, sku or product code (optional)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\ProductListRead
     */
    public function accountsAccountIdProductsGet($accountId, $name = null, $vendor = null, $sku = null)
    {
        list($response) = $this->accountsAccountIdProductsGetWithHttpInfo($accountId, $name, $vendor, $sku);
        return $response;
    }

    /**
     * Operation accountsAccountIdProductsGetWithHttpInfo
     *
     * Information about all available products, optionally filtered.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  string $name Return only products whose name contains this string. (optional)
     * @param  string $vendor Return only products who are from a vendor/supplier (optional)
     * @param  string $sku Return only products whose have this unique identifier, sku or product code (optional)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\ProductListRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdProductsGetWithHttpInfo($accountId, $name = null, $vendor = null, $sku = null)
    {
        $returnType = '\Tracmap\Model\ProductListRead';
        $request = $this->accountsAccountIdProductsGetRequest($accountId, $name, $vendor, $sku);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\ProductListRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdProductsGetAsync
     *
     * Information about all available products, optionally filtered.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  string $name Return only products whose name contains this string. (optional)
     * @param  string $vendor Return only products who are from a vendor/supplier (optional)
     * @param  string $sku Return only products whose have this unique identifier, sku or product code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdProductsGetAsync($accountId, $name = null, $vendor = null, $sku = null)
    {
        return $this->accountsAccountIdProductsGetAsyncWithHttpInfo($accountId, $name, $vendor, $sku)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdProductsGetAsyncWithHttpInfo
     *
     * Information about all available products, optionally filtered.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  string $name Return only products whose name contains this string. (optional)
     * @param  string $vendor Return only products who are from a vendor/supplier (optional)
     * @param  string $sku Return only products whose have this unique identifier, sku or product code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdProductsGetAsyncWithHttpInfo($accountId, $name = null, $vendor = null, $sku = null)
    {
        $returnType = '\Tracmap\Model\ProductListRead';
        $request = $this->accountsAccountIdProductsGetRequest($accountId, $name, $vendor, $sku);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdProductsGet'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  string $name Return only products whose name contains this string. (optional)
     * @param  string $vendor Return only products who are from a vendor/supplier (optional)
     * @param  string $sku Return only products whose have this unique identifier, sku or product code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdProductsGetRequest($accountId, $name = null, $vendor = null, $sku = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdProductsGet'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling ProductApi.accountsAccountIdProductsGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($vendor !== null) {
            $queryParams['vendor'] = ObjectSerializer::toQueryValue($vendor);
        }
        // query params
        if ($sku !== null) {
            $queryParams['sku'] = ObjectSerializer::toQueryValue($sku);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdProductsPost
     *
     * Create a new custom product.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  \Tracmap\Model\Product $product product (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\ProductListRead
     */
    public function accountsAccountIdProductsPost($accountId, $product)
    {
        list($response) = $this->accountsAccountIdProductsPostWithHttpInfo($accountId, $product);
        return $response;
    }

    /**
     * Operation accountsAccountIdProductsPostWithHttpInfo
     *
     * Create a new custom product.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  \Tracmap\Model\Product $product (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\ProductListRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdProductsPostWithHttpInfo($accountId, $product)
    {
        $returnType = '\Tracmap\Model\ProductListRead';
        $request = $this->accountsAccountIdProductsPostRequest($accountId, $product);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\ProductListRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdProductsPostAsync
     *
     * Create a new custom product.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  \Tracmap\Model\Product $product (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdProductsPostAsync($accountId, $product)
    {
        return $this->accountsAccountIdProductsPostAsyncWithHttpInfo($accountId, $product)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdProductsPostAsyncWithHttpInfo
     *
     * Create a new custom product.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  \Tracmap\Model\Product $product (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdProductsPostAsyncWithHttpInfo($accountId, $product)
    {
        $returnType = '\Tracmap\Model\ProductListRead';
        $request = $this->accountsAccountIdProductsPostRequest($accountId, $product);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdProductsPost'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  \Tracmap\Model\Product $product (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdProductsPostRequest($accountId, $product)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdProductsPost'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling ProductApi.accountsAccountIdProductsPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling accountsAccountIdProductsPost'
            );
        }

        $resourcePath = '/accounts/{account_id}/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($product)) {
            $_tempBody = $product;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdProductsProductIdDelete
     *
     * Delete a particular product.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $productId The id of the product. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountIdProductsProductIdDelete($accountId, $productId)
    {
        $this->accountsAccountIdProductsProductIdDeleteWithHttpInfo($accountId, $productId);
    }

    /**
     * Operation accountsAccountIdProductsProductIdDeleteWithHttpInfo
     *
     * Delete a particular product.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $productId The id of the product. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdProductsProductIdDeleteWithHttpInfo($accountId, $productId)
    {
        $returnType = '';
        $request = $this->accountsAccountIdProductsProductIdDeleteRequest($accountId, $productId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdProductsProductIdDeleteAsync
     *
     * Delete a particular product.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $productId The id of the product. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdProductsProductIdDeleteAsync($accountId, $productId)
    {
        return $this->accountsAccountIdProductsProductIdDeleteAsyncWithHttpInfo($accountId, $productId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdProductsProductIdDeleteAsyncWithHttpInfo
     *
     * Delete a particular product.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $productId The id of the product. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdProductsProductIdDeleteAsyncWithHttpInfo($accountId, $productId)
    {
        $returnType = '';
        $request = $this->accountsAccountIdProductsProductIdDeleteRequest($accountId, $productId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdProductsProductIdDelete'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $productId The id of the product. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdProductsProductIdDeleteRequest($accountId, $productId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdProductsProductIdDelete'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling ProductApi.accountsAccountIdProductsProductIdDelete, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'productId' is set
        if ($productId === null || (is_array($productId) && count($productId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productId when calling accountsAccountIdProductsProductIdDelete'
            );
        }
        if ($productId < 1) {
            throw new \InvalidArgumentException('invalid value for "$productId" when calling ProductApi.accountsAccountIdProductsProductIdDelete, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/products/{product_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($productId !== null) {
            $resourcePath = str_replace(
                '{' . 'product_id' . '}',
                ObjectSerializer::toPathValue($productId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdProductsProductIdGet
     *
     * Detailed information about a particular product.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $productId The id of the product. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\ProductRead
     */
    public function accountsAccountIdProductsProductIdGet($accountId, $productId)
    {
        list($response) = $this->accountsAccountIdProductsProductIdGetWithHttpInfo($accountId, $productId);
        return $response;
    }

    /**
     * Operation accountsAccountIdProductsProductIdGetWithHttpInfo
     *
     * Detailed information about a particular product.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $productId The id of the product. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\ProductRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdProductsProductIdGetWithHttpInfo($accountId, $productId)
    {
        $returnType = '\Tracmap\Model\ProductRead';
        $request = $this->accountsAccountIdProductsProductIdGetRequest($accountId, $productId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\ProductRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdProductsProductIdGetAsync
     *
     * Detailed information about a particular product.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $productId The id of the product. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdProductsProductIdGetAsync($accountId, $productId)
    {
        return $this->accountsAccountIdProductsProductIdGetAsyncWithHttpInfo($accountId, $productId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdProductsProductIdGetAsyncWithHttpInfo
     *
     * Detailed information about a particular product.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $productId The id of the product. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdProductsProductIdGetAsyncWithHttpInfo($accountId, $productId)
    {
        $returnType = '\Tracmap\Model\ProductRead';
        $request = $this->accountsAccountIdProductsProductIdGetRequest($accountId, $productId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdProductsProductIdGet'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $productId The id of the product. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdProductsProductIdGetRequest($accountId, $productId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdProductsProductIdGet'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling ProductApi.accountsAccountIdProductsProductIdGet, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'productId' is set
        if ($productId === null || (is_array($productId) && count($productId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productId when calling accountsAccountIdProductsProductIdGet'
            );
        }
        if ($productId < 1) {
            throw new \InvalidArgumentException('invalid value for "$productId" when calling ProductApi.accountsAccountIdProductsProductIdGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/products/{product_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($productId !== null) {
            $resourcePath = str_replace(
                '{' . 'product_id' . '}',
                ObjectSerializer::toPathValue($productId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directProductGet
     *
     * Information about all available products, optionally filtered. Only used in conjuction with /direct/job.
     *
     * @param  string $accountId Return only products for this account. (optional)
     * @param  string $name Return only products whose name contains this string. (optional)
     * @param  string $vendor Return only products who are from a vendor/supplier (optional)
     * @param  string $sku Return only products whose have this unique identifier, sku or product code (optional)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\ProductListRead
     */
    public function directProductGet($accountId = null, $name = null, $vendor = null, $sku = null)
    {
        list($response) = $this->directProductGetWithHttpInfo($accountId, $name, $vendor, $sku);
        return $response;
    }

    /**
     * Operation directProductGetWithHttpInfo
     *
     * Information about all available products, optionally filtered. Only used in conjuction with /direct/job.
     *
     * @param  string $accountId Return only products for this account. (optional)
     * @param  string $name Return only products whose name contains this string. (optional)
     * @param  string $vendor Return only products who are from a vendor/supplier (optional)
     * @param  string $sku Return only products whose have this unique identifier, sku or product code (optional)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\ProductListRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function directProductGetWithHttpInfo($accountId = null, $name = null, $vendor = null, $sku = null)
    {
        $returnType = '\Tracmap\Model\ProductListRead';
        $request = $this->directProductGetRequest($accountId, $name, $vendor, $sku);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\ProductListRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directProductGetAsync
     *
     * Information about all available products, optionally filtered. Only used in conjuction with /direct/job.
     *
     * @param  string $accountId Return only products for this account. (optional)
     * @param  string $name Return only products whose name contains this string. (optional)
     * @param  string $vendor Return only products who are from a vendor/supplier (optional)
     * @param  string $sku Return only products whose have this unique identifier, sku or product code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directProductGetAsync($accountId = null, $name = null, $vendor = null, $sku = null)
    {
        return $this->directProductGetAsyncWithHttpInfo($accountId, $name, $vendor, $sku)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directProductGetAsyncWithHttpInfo
     *
     * Information about all available products, optionally filtered. Only used in conjuction with /direct/job.
     *
     * @param  string $accountId Return only products for this account. (optional)
     * @param  string $name Return only products whose name contains this string. (optional)
     * @param  string $vendor Return only products who are from a vendor/supplier (optional)
     * @param  string $sku Return only products whose have this unique identifier, sku or product code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directProductGetAsyncWithHttpInfo($accountId = null, $name = null, $vendor = null, $sku = null)
    {
        $returnType = '\Tracmap\Model\ProductListRead';
        $request = $this->directProductGetRequest($accountId, $name, $vendor, $sku);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directProductGet'
     *
     * @param  string $accountId Return only products for this account. (optional)
     * @param  string $name Return only products whose name contains this string. (optional)
     * @param  string $vendor Return only products who are from a vendor/supplier (optional)
     * @param  string $sku Return only products whose have this unique identifier, sku or product code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function directProductGetRequest($accountId = null, $name = null, $vendor = null, $sku = null)
    {

        $resourcePath = '/direct/product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accountId !== null) {
            $queryParams['account_id'] = ObjectSerializer::toQueryValue($accountId);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($vendor !== null) {
            $queryParams['vendor'] = ObjectSerializer::toQueryValue($vendor);
        }
        // query params
        if ($sku !== null) {
            $queryParams['sku'] = ObjectSerializer::toQueryValue($sku);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
