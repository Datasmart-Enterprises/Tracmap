<?php
/**
 * JobApi
 * PHP version 5
 *
 * @category Class
 * @package  Tracmap
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TracMap API
 *
 * The TracMap API allows you to create and manage __Jobs__, __Products__, and __Maps__ on TracMap Online.
 *
 * OpenAPI spec version: 1.0.25
 * Contact: api@tracmap.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tracmap\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Tracmap\ApiException;
use Tracmap\Configuration;
use Tracmap\HeaderSelector;
use Tracmap\ObjectSerializer;

/**
 * JobApi Class Doc Comment
 *
 * @category Class
 * @package  Tracmap
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JobApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountsAccountIdJobsGdxJobIdGet
     *
     * Detailed information about a particular job returned in GDX format.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  bool $rateCleaned Should outliers in the rate data be removed automatically? ***Note:*** TracMap can alter the default behaviour on a per integration level if required. (optional, default to false)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function accountsAccountIdJobsGdxJobIdGet($accountId, $jobId, $rateCleaned = 'false')
    {
        list($response) = $this->accountsAccountIdJobsGdxJobIdGetWithHttpInfo($accountId, $jobId, $rateCleaned);
        return $response;
    }

    /**
     * Operation accountsAccountIdJobsGdxJobIdGetWithHttpInfo
     *
     * Detailed information about a particular job returned in GDX format.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  bool $rateCleaned Should outliers in the rate data be removed automatically? ***Note:*** TracMap can alter the default behaviour on a per integration level if required. (optional, default to false)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsGdxJobIdGetWithHttpInfo($accountId, $jobId, $rateCleaned = 'false')
    {
        $returnType = 'string';
        $request = $this->accountsAccountIdJobsGdxJobIdGetRequest($accountId, $jobId, $rateCleaned);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsGdxJobIdGetAsync
     *
     * Detailed information about a particular job returned in GDX format.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  bool $rateCleaned Should outliers in the rate data be removed automatically? ***Note:*** TracMap can alter the default behaviour on a per integration level if required. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsGdxJobIdGetAsync($accountId, $jobId, $rateCleaned = 'false')
    {
        return $this->accountsAccountIdJobsGdxJobIdGetAsyncWithHttpInfo($accountId, $jobId, $rateCleaned)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsGdxJobIdGetAsyncWithHttpInfo
     *
     * Detailed information about a particular job returned in GDX format.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  bool $rateCleaned Should outliers in the rate data be removed automatically? ***Note:*** TracMap can alter the default behaviour on a per integration level if required. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsGdxJobIdGetAsyncWithHttpInfo($accountId, $jobId, $rateCleaned = 'false')
    {
        $returnType = 'string';
        $request = $this->accountsAccountIdJobsGdxJobIdGetRequest($accountId, $jobId, $rateCleaned);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsGdxJobIdGet'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  bool $rateCleaned Should outliers in the rate data be removed automatically? ***Note:*** TracMap can alter the default behaviour on a per integration level if required. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsGdxJobIdGetRequest($accountId, $jobId, $rateCleaned = 'false')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsGdxJobIdGet'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsGdxJobIdGet, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsGdxJobIdGet'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling JobApi.accountsAccountIdJobsGdxJobIdGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/jobs_gdx/{job_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($rateCleaned !== null) {
            $queryParams['rate_cleaned'] = ObjectSerializer::toQueryValue($rateCleaned);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsGet
     *
     * Information about all available jobs, optionally filtered, ordered by last modification date (desc).
     *
     * @param  int $accountId The id of the account. (required)
     * @param  string $status Only list jobs that have this status (Valid status includes placed, accepted, assigned, returned and complete). (optional)
     * @param  int $fromDate Jobs created after this epoch date. Default value: 90 days before current server time. (optional)
     * @param  int $toDate Jobs created before this epoch date. Default value: current server time. (optional)
     * @param  int $modifiedSince Jobs modified after this epoch date. (optional)
     * @param  int $jobStartDateFrom Jobs started after this epoch date. (optional)
     * @param  int $jobStartDateTo Jobs started before this epoch date. (optional)
     * @param  int $jobEndDateFrom Jobs finished after this epoch date. (optional)
     * @param  int $jobEndDateTo Jobs finished before this epoch date. (optional)
     * @param  bool $product Value indicating whether the jobs should be filtered to those that have recorded product applied. (optional)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\JobListRead
     */
    public function accountsAccountIdJobsGet($accountId, $status = null, $fromDate = null, $toDate = null, $modifiedSince = null, $jobStartDateFrom = null, $jobStartDateTo = null, $jobEndDateFrom = null, $jobEndDateTo = null, $product = null)
    {
        list($response) = $this->accountsAccountIdJobsGetWithHttpInfo($accountId, $status, $fromDate, $toDate, $modifiedSince, $jobStartDateFrom, $jobStartDateTo, $jobEndDateFrom, $jobEndDateTo, $product);
        return $response;
    }

    /**
     * Operation accountsAccountIdJobsGetWithHttpInfo
     *
     * Information about all available jobs, optionally filtered, ordered by last modification date (desc).
     *
     * @param  int $accountId The id of the account. (required)
     * @param  string $status Only list jobs that have this status (Valid status includes placed, accepted, assigned, returned and complete). (optional)
     * @param  int $fromDate Jobs created after this epoch date. Default value: 90 days before current server time. (optional)
     * @param  int $toDate Jobs created before this epoch date. Default value: current server time. (optional)
     * @param  int $modifiedSince Jobs modified after this epoch date. (optional)
     * @param  int $jobStartDateFrom Jobs started after this epoch date. (optional)
     * @param  int $jobStartDateTo Jobs started before this epoch date. (optional)
     * @param  int $jobEndDateFrom Jobs finished after this epoch date. (optional)
     * @param  int $jobEndDateTo Jobs finished before this epoch date. (optional)
     * @param  bool $product Value indicating whether the jobs should be filtered to those that have recorded product applied. (optional)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\JobListRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsGetWithHttpInfo($accountId, $status = null, $fromDate = null, $toDate = null, $modifiedSince = null, $jobStartDateFrom = null, $jobStartDateTo = null, $jobEndDateFrom = null, $jobEndDateTo = null, $product = null)
    {
        $returnType = '\Tracmap\Model\JobListRead';
        $request = $this->accountsAccountIdJobsGetRequest($accountId, $status, $fromDate, $toDate, $modifiedSince, $jobStartDateFrom, $jobStartDateTo, $jobEndDateFrom, $jobEndDateTo, $product);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\JobListRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsGetAsync
     *
     * Information about all available jobs, optionally filtered, ordered by last modification date (desc).
     *
     * @param  int $accountId The id of the account. (required)
     * @param  string $status Only list jobs that have this status (Valid status includes placed, accepted, assigned, returned and complete). (optional)
     * @param  int $fromDate Jobs created after this epoch date. Default value: 90 days before current server time. (optional)
     * @param  int $toDate Jobs created before this epoch date. Default value: current server time. (optional)
     * @param  int $modifiedSince Jobs modified after this epoch date. (optional)
     * @param  int $jobStartDateFrom Jobs started after this epoch date. (optional)
     * @param  int $jobStartDateTo Jobs started before this epoch date. (optional)
     * @param  int $jobEndDateFrom Jobs finished after this epoch date. (optional)
     * @param  int $jobEndDateTo Jobs finished before this epoch date. (optional)
     * @param  bool $product Value indicating whether the jobs should be filtered to those that have recorded product applied. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsGetAsync($accountId, $status = null, $fromDate = null, $toDate = null, $modifiedSince = null, $jobStartDateFrom = null, $jobStartDateTo = null, $jobEndDateFrom = null, $jobEndDateTo = null, $product = null)
    {
        return $this->accountsAccountIdJobsGetAsyncWithHttpInfo($accountId, $status, $fromDate, $toDate, $modifiedSince, $jobStartDateFrom, $jobStartDateTo, $jobEndDateFrom, $jobEndDateTo, $product)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsGetAsyncWithHttpInfo
     *
     * Information about all available jobs, optionally filtered, ordered by last modification date (desc).
     *
     * @param  int $accountId The id of the account. (required)
     * @param  string $status Only list jobs that have this status (Valid status includes placed, accepted, assigned, returned and complete). (optional)
     * @param  int $fromDate Jobs created after this epoch date. Default value: 90 days before current server time. (optional)
     * @param  int $toDate Jobs created before this epoch date. Default value: current server time. (optional)
     * @param  int $modifiedSince Jobs modified after this epoch date. (optional)
     * @param  int $jobStartDateFrom Jobs started after this epoch date. (optional)
     * @param  int $jobStartDateTo Jobs started before this epoch date. (optional)
     * @param  int $jobEndDateFrom Jobs finished after this epoch date. (optional)
     * @param  int $jobEndDateTo Jobs finished before this epoch date. (optional)
     * @param  bool $product Value indicating whether the jobs should be filtered to those that have recorded product applied. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsGetAsyncWithHttpInfo($accountId, $status = null, $fromDate = null, $toDate = null, $modifiedSince = null, $jobStartDateFrom = null, $jobStartDateTo = null, $jobEndDateFrom = null, $jobEndDateTo = null, $product = null)
    {
        $returnType = '\Tracmap\Model\JobListRead';
        $request = $this->accountsAccountIdJobsGetRequest($accountId, $status, $fromDate, $toDate, $modifiedSince, $jobStartDateFrom, $jobStartDateTo, $jobEndDateFrom, $jobEndDateTo, $product);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsGet'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  string $status Only list jobs that have this status (Valid status includes placed, accepted, assigned, returned and complete). (optional)
     * @param  int $fromDate Jobs created after this epoch date. Default value: 90 days before current server time. (optional)
     * @param  int $toDate Jobs created before this epoch date. Default value: current server time. (optional)
     * @param  int $modifiedSince Jobs modified after this epoch date. (optional)
     * @param  int $jobStartDateFrom Jobs started after this epoch date. (optional)
     * @param  int $jobStartDateTo Jobs started before this epoch date. (optional)
     * @param  int $jobEndDateFrom Jobs finished after this epoch date. (optional)
     * @param  int $jobEndDateTo Jobs finished before this epoch date. (optional)
     * @param  bool $product Value indicating whether the jobs should be filtered to those that have recorded product applied. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsGetRequest($accountId, $status = null, $fromDate = null, $toDate = null, $modifiedSince = null, $jobStartDateFrom = null, $jobStartDateTo = null, $jobEndDateFrom = null, $jobEndDateTo = null, $product = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsGet'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($fromDate !== null) {
            $queryParams['from_date'] = ObjectSerializer::toQueryValue($fromDate);
        }
        // query params
        if ($toDate !== null) {
            $queryParams['to_date'] = ObjectSerializer::toQueryValue($toDate);
        }
        // query params
        if ($modifiedSince !== null) {
            $queryParams['modified_since'] = ObjectSerializer::toQueryValue($modifiedSince);
        }
        // query params
        if ($jobStartDateFrom !== null) {
            $queryParams['job_start_date_from'] = ObjectSerializer::toQueryValue($jobStartDateFrom);
        }
        // query params
        if ($jobStartDateTo !== null) {
            $queryParams['job_start_date_to'] = ObjectSerializer::toQueryValue($jobStartDateTo);
        }
        // query params
        if ($jobEndDateFrom !== null) {
            $queryParams['job_end_date_from'] = ObjectSerializer::toQueryValue($jobEndDateFrom);
        }
        // query params
        if ($jobEndDateTo !== null) {
            $queryParams['job_end_date_to'] = ObjectSerializer::toQueryValue($jobEndDateTo);
        }
        // query params
        if ($product !== null) {
            $queryParams['product'] = ObjectSerializer::toQueryValue($product);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsJobIdAssignPost
     *
     * Assign a job to one or more devices.
     *
     * @param  int $accountId The numeric identifier of the account that includes the job and target devices to be assigned. (required)
     * @param  int $jobId The numeric identifier of the job to be assigned. This is returned by POST **_/accounts/{account_id}/jobs** when creating a new job, or by GET **_/accounts/{account_id}/jobs** for existing jobs. (required)
     * @param  \Tracmap\Model\DeviceShortListRead $ownershipId List of *ownership_id* of the device(s) to which the job will be assigned. These are returned by GET from **_/accounts/{account_id}/devices**, or from the _Ownership ID_ column in the Display _Units table_ in the Tracmap Online Admin area. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\DeviceShortListRead
     */
    public function accountsAccountIdJobsJobIdAssignPost($accountId, $jobId, $ownershipId)
    {
        list($response) = $this->accountsAccountIdJobsJobIdAssignPostWithHttpInfo($accountId, $jobId, $ownershipId);
        return $response;
    }

    /**
     * Operation accountsAccountIdJobsJobIdAssignPostWithHttpInfo
     *
     * Assign a job to one or more devices.
     *
     * @param  int $accountId The numeric identifier of the account that includes the job and target devices to be assigned. (required)
     * @param  int $jobId The numeric identifier of the job to be assigned. This is returned by POST **_/accounts/{account_id}/jobs** when creating a new job, or by GET **_/accounts/{account_id}/jobs** for existing jobs. (required)
     * @param  \Tracmap\Model\DeviceShortListRead $ownershipId List of *ownership_id* of the device(s) to which the job will be assigned. These are returned by GET from **_/accounts/{account_id}/devices**, or from the _Ownership ID_ column in the Display _Units table_ in the Tracmap Online Admin area. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\DeviceShortListRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdAssignPostWithHttpInfo($accountId, $jobId, $ownershipId)
    {
        $returnType = '\Tracmap\Model\DeviceShortListRead';
        $request = $this->accountsAccountIdJobsJobIdAssignPostRequest($accountId, $jobId, $ownershipId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\DeviceShortListRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdAssignPostAsync
     *
     * Assign a job to one or more devices.
     *
     * @param  int $accountId The numeric identifier of the account that includes the job and target devices to be assigned. (required)
     * @param  int $jobId The numeric identifier of the job to be assigned. This is returned by POST **_/accounts/{account_id}/jobs** when creating a new job, or by GET **_/accounts/{account_id}/jobs** for existing jobs. (required)
     * @param  \Tracmap\Model\DeviceShortListRead $ownershipId List of *ownership_id* of the device(s) to which the job will be assigned. These are returned by GET from **_/accounts/{account_id}/devices**, or from the _Ownership ID_ column in the Display _Units table_ in the Tracmap Online Admin area. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdAssignPostAsync($accountId, $jobId, $ownershipId)
    {
        return $this->accountsAccountIdJobsJobIdAssignPostAsyncWithHttpInfo($accountId, $jobId, $ownershipId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdAssignPostAsyncWithHttpInfo
     *
     * Assign a job to one or more devices.
     *
     * @param  int $accountId The numeric identifier of the account that includes the job and target devices to be assigned. (required)
     * @param  int $jobId The numeric identifier of the job to be assigned. This is returned by POST **_/accounts/{account_id}/jobs** when creating a new job, or by GET **_/accounts/{account_id}/jobs** for existing jobs. (required)
     * @param  \Tracmap\Model\DeviceShortListRead $ownershipId List of *ownership_id* of the device(s) to which the job will be assigned. These are returned by GET from **_/accounts/{account_id}/devices**, or from the _Ownership ID_ column in the Display _Units table_ in the Tracmap Online Admin area. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdAssignPostAsyncWithHttpInfo($accountId, $jobId, $ownershipId)
    {
        $returnType = '\Tracmap\Model\DeviceShortListRead';
        $request = $this->accountsAccountIdJobsJobIdAssignPostRequest($accountId, $jobId, $ownershipId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdAssignPost'
     *
     * @param  int $accountId The numeric identifier of the account that includes the job and target devices to be assigned. (required)
     * @param  int $jobId The numeric identifier of the job to be assigned. This is returned by POST **_/accounts/{account_id}/jobs** when creating a new job, or by GET **_/accounts/{account_id}/jobs** for existing jobs. (required)
     * @param  \Tracmap\Model\DeviceShortListRead $ownershipId List of *ownership_id* of the device(s) to which the job will be assigned. These are returned by GET from **_/accounts/{account_id}/devices**, or from the _Ownership ID_ column in the Display _Units table_ in the Tracmap Online Admin area. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdAssignPostRequest($accountId, $jobId, $ownershipId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdAssignPost'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsJobIdAssignPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdAssignPost'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling JobApi.accountsAccountIdJobsJobIdAssignPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ownershipId' is set
        if ($ownershipId === null || (is_array($ownershipId) && count($ownershipId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ownershipId when calling accountsAccountIdJobsJobIdAssignPost'
            );
        }

        $resourcePath = '/accounts/{account_id}/jobs/{job_id}/assign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($ownershipId)) {
            $_tempBody = $ownershipId;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsJobIdDelete
     *
     * Delete a particular job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountIdJobsJobIdDelete($accountId, $jobId)
    {
        $this->accountsAccountIdJobsJobIdDeleteWithHttpInfo($accountId, $jobId);
    }

    /**
     * Operation accountsAccountIdJobsJobIdDeleteWithHttpInfo
     *
     * Delete a particular job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdDeleteWithHttpInfo($accountId, $jobId)
    {
        $returnType = '';
        $request = $this->accountsAccountIdJobsJobIdDeleteRequest($accountId, $jobId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdDeleteAsync
     *
     * Delete a particular job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdDeleteAsync($accountId, $jobId)
    {
        return $this->accountsAccountIdJobsJobIdDeleteAsyncWithHttpInfo($accountId, $jobId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdDeleteAsyncWithHttpInfo
     *
     * Delete a particular job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdDeleteAsyncWithHttpInfo($accountId, $jobId)
    {
        $returnType = '';
        $request = $this->accountsAccountIdJobsJobIdDeleteRequest($accountId, $jobId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdDelete'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdDeleteRequest($accountId, $jobId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdDelete'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsJobIdDelete, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdDelete'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling JobApi.accountsAccountIdJobsJobIdDelete, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/jobs/{job_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsJobIdDiagnosticPost
     *
     * Send diagnostics about a job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\Content1 $content Diagnostic information about the job. A typical diagnostic payload will include a &#x60;body&#x60; field that describes the issue to the contractor. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountIdJobsJobIdDiagnosticPost($accountId, $jobId, $content)
    {
        $this->accountsAccountIdJobsJobIdDiagnosticPostWithHttpInfo($accountId, $jobId, $content);
    }

    /**
     * Operation accountsAccountIdJobsJobIdDiagnosticPostWithHttpInfo
     *
     * Send diagnostics about a job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\Content1 $content Diagnostic information about the job. A typical diagnostic payload will include a &#x60;body&#x60; field that describes the issue to the contractor. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdDiagnosticPostWithHttpInfo($accountId, $jobId, $content)
    {
        $returnType = '';
        $request = $this->accountsAccountIdJobsJobIdDiagnosticPostRequest($accountId, $jobId, $content);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdDiagnosticPostAsync
     *
     * Send diagnostics about a job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\Content1 $content Diagnostic information about the job. A typical diagnostic payload will include a &#x60;body&#x60; field that describes the issue to the contractor. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdDiagnosticPostAsync($accountId, $jobId, $content)
    {
        return $this->accountsAccountIdJobsJobIdDiagnosticPostAsyncWithHttpInfo($accountId, $jobId, $content)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdDiagnosticPostAsyncWithHttpInfo
     *
     * Send diagnostics about a job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\Content1 $content Diagnostic information about the job. A typical diagnostic payload will include a &#x60;body&#x60; field that describes the issue to the contractor. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdDiagnosticPostAsyncWithHttpInfo($accountId, $jobId, $content)
    {
        $returnType = '';
        $request = $this->accountsAccountIdJobsJobIdDiagnosticPostRequest($accountId, $jobId, $content);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdDiagnosticPost'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\Content1 $content Diagnostic information about the job. A typical diagnostic payload will include a &#x60;body&#x60; field that describes the issue to the contractor. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdDiagnosticPostRequest($accountId, $jobId, $content)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdDiagnosticPost'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsJobIdDiagnosticPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdDiagnosticPost'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling JobApi.accountsAccountIdJobsJobIdDiagnosticPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'content' is set
        if ($content === null || (is_array($content) && count($content) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content when calling accountsAccountIdJobsJobIdDiagnosticPost'
            );
        }

        $resourcePath = '/accounts/{account_id}/jobs/{job_id}/diagnostic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($content)) {
            $_tempBody = $content;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsJobIdGeometryNonworkedDetailedGet
     *
     * Get a job's non-worked geometry as placement lines including rates, altitudes, and timestamps.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\GeoJSONFeatureList
     */
    public function accountsAccountIdJobsJobIdGeometryNonworkedDetailedGet($accountId, $jobId)
    {
        list($response) = $this->accountsAccountIdJobsJobIdGeometryNonworkedDetailedGetWithHttpInfo($accountId, $jobId);
        return $response;
    }

    /**
     * Operation accountsAccountIdJobsJobIdGeometryNonworkedDetailedGetWithHttpInfo
     *
     * Get a job's non-worked geometry as placement lines including rates, altitudes, and timestamps.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\GeoJSONFeatureList, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdGeometryNonworkedDetailedGetWithHttpInfo($accountId, $jobId)
    {
        $returnType = '\Tracmap\Model\GeoJSONFeatureList';
        $request = $this->accountsAccountIdJobsJobIdGeometryNonworkedDetailedGetRequest($accountId, $jobId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\GeoJSONFeatureList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdGeometryNonworkedDetailedGetAsync
     *
     * Get a job's non-worked geometry as placement lines including rates, altitudes, and timestamps.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdGeometryNonworkedDetailedGetAsync($accountId, $jobId)
    {
        return $this->accountsAccountIdJobsJobIdGeometryNonworkedDetailedGetAsyncWithHttpInfo($accountId, $jobId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdGeometryNonworkedDetailedGetAsyncWithHttpInfo
     *
     * Get a job's non-worked geometry as placement lines including rates, altitudes, and timestamps.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdGeometryNonworkedDetailedGetAsyncWithHttpInfo($accountId, $jobId)
    {
        $returnType = '\Tracmap\Model\GeoJSONFeatureList';
        $request = $this->accountsAccountIdJobsJobIdGeometryNonworkedDetailedGetRequest($accountId, $jobId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdGeometryNonworkedDetailedGet'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdGeometryNonworkedDetailedGetRequest($accountId, $jobId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdGeometryNonworkedDetailedGet'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsJobIdGeometryNonworkedDetailedGet, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdGeometryNonworkedDetailedGet'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling JobApi.accountsAccountIdJobsJobIdGeometryNonworkedDetailedGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/jobs/{job_id}/geometry/nonworked/detailed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsJobIdGeometryRequestedGet
     *
     * Get a job's requested (planned) geometry as a set of polygons and centre lines if available.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\GeoJSONFeatureList
     */
    public function accountsAccountIdJobsJobIdGeometryRequestedGet($accountId, $jobId)
    {
        list($response) = $this->accountsAccountIdJobsJobIdGeometryRequestedGetWithHttpInfo($accountId, $jobId);
        return $response;
    }

    /**
     * Operation accountsAccountIdJobsJobIdGeometryRequestedGetWithHttpInfo
     *
     * Get a job's requested (planned) geometry as a set of polygons and centre lines if available.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\GeoJSONFeatureList, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdGeometryRequestedGetWithHttpInfo($accountId, $jobId)
    {
        $returnType = '\Tracmap\Model\GeoJSONFeatureList';
        $request = $this->accountsAccountIdJobsJobIdGeometryRequestedGetRequest($accountId, $jobId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\GeoJSONFeatureList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdGeometryRequestedGetAsync
     *
     * Get a job's requested (planned) geometry as a set of polygons and centre lines if available.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdGeometryRequestedGetAsync($accountId, $jobId)
    {
        return $this->accountsAccountIdJobsJobIdGeometryRequestedGetAsyncWithHttpInfo($accountId, $jobId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdGeometryRequestedGetAsyncWithHttpInfo
     *
     * Get a job's requested (planned) geometry as a set of polygons and centre lines if available.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdGeometryRequestedGetAsyncWithHttpInfo($accountId, $jobId)
    {
        $returnType = '\Tracmap\Model\GeoJSONFeatureList';
        $request = $this->accountsAccountIdJobsJobIdGeometryRequestedGetRequest($accountId, $jobId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdGeometryRequestedGet'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdGeometryRequestedGetRequest($accountId, $jobId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdGeometryRequestedGet'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsJobIdGeometryRequestedGet, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdGeometryRequestedGet'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling JobApi.accountsAccountIdJobsJobIdGeometryRequestedGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/jobs/{job_id}/geometry/requested';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsJobIdGeometryWorkedDetailedGet
     *
     * Get a job's worked geometry as placement lines including rates, altitudes, and timestamps.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  bool $rateCleaned Should outliers in the rate data be removed automatically? ***Note:*** TracMap can alter the default behaviour on a per integration level if required. (optional, default to false)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\GeoJSONFeatureList
     */
    public function accountsAccountIdJobsJobIdGeometryWorkedDetailedGet($accountId, $jobId, $rateCleaned = 'false')
    {
        list($response) = $this->accountsAccountIdJobsJobIdGeometryWorkedDetailedGetWithHttpInfo($accountId, $jobId, $rateCleaned);
        return $response;
    }

    /**
     * Operation accountsAccountIdJobsJobIdGeometryWorkedDetailedGetWithHttpInfo
     *
     * Get a job's worked geometry as placement lines including rates, altitudes, and timestamps.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  bool $rateCleaned Should outliers in the rate data be removed automatically? ***Note:*** TracMap can alter the default behaviour on a per integration level if required. (optional, default to false)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\GeoJSONFeatureList, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdGeometryWorkedDetailedGetWithHttpInfo($accountId, $jobId, $rateCleaned = 'false')
    {
        $returnType = '\Tracmap\Model\GeoJSONFeatureList';
        $request = $this->accountsAccountIdJobsJobIdGeometryWorkedDetailedGetRequest($accountId, $jobId, $rateCleaned);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\GeoJSONFeatureList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdGeometryWorkedDetailedGetAsync
     *
     * Get a job's worked geometry as placement lines including rates, altitudes, and timestamps.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  bool $rateCleaned Should outliers in the rate data be removed automatically? ***Note:*** TracMap can alter the default behaviour on a per integration level if required. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdGeometryWorkedDetailedGetAsync($accountId, $jobId, $rateCleaned = 'false')
    {
        return $this->accountsAccountIdJobsJobIdGeometryWorkedDetailedGetAsyncWithHttpInfo($accountId, $jobId, $rateCleaned)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdGeometryWorkedDetailedGetAsyncWithHttpInfo
     *
     * Get a job's worked geometry as placement lines including rates, altitudes, and timestamps.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  bool $rateCleaned Should outliers in the rate data be removed automatically? ***Note:*** TracMap can alter the default behaviour on a per integration level if required. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdGeometryWorkedDetailedGetAsyncWithHttpInfo($accountId, $jobId, $rateCleaned = 'false')
    {
        $returnType = '\Tracmap\Model\GeoJSONFeatureList';
        $request = $this->accountsAccountIdJobsJobIdGeometryWorkedDetailedGetRequest($accountId, $jobId, $rateCleaned);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdGeometryWorkedDetailedGet'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  bool $rateCleaned Should outliers in the rate data be removed automatically? ***Note:*** TracMap can alter the default behaviour on a per integration level if required. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdGeometryWorkedDetailedGetRequest($accountId, $jobId, $rateCleaned = 'false')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdGeometryWorkedDetailedGet'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsJobIdGeometryWorkedDetailedGet, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdGeometryWorkedDetailedGet'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling JobApi.accountsAccountIdJobsJobIdGeometryWorkedDetailedGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/jobs/{job_id}/geometry/worked/detailed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($rateCleaned !== null) {
            $queryParams['rate_cleaned'] = ObjectSerializer::toQueryValue($rateCleaned);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsJobIdGeometryWorkedGet
     *
     * Get a job's worked geometry as series of placement polygons.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\GeoJSONFeatureList
     */
    public function accountsAccountIdJobsJobIdGeometryWorkedGet($accountId, $jobId)
    {
        list($response) = $this->accountsAccountIdJobsJobIdGeometryWorkedGetWithHttpInfo($accountId, $jobId);
        return $response;
    }

    /**
     * Operation accountsAccountIdJobsJobIdGeometryWorkedGetWithHttpInfo
     *
     * Get a job's worked geometry as series of placement polygons.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\GeoJSONFeatureList, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdGeometryWorkedGetWithHttpInfo($accountId, $jobId)
    {
        $returnType = '\Tracmap\Model\GeoJSONFeatureList';
        $request = $this->accountsAccountIdJobsJobIdGeometryWorkedGetRequest($accountId, $jobId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\GeoJSONFeatureList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdGeometryWorkedGetAsync
     *
     * Get a job's worked geometry as series of placement polygons.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdGeometryWorkedGetAsync($accountId, $jobId)
    {
        return $this->accountsAccountIdJobsJobIdGeometryWorkedGetAsyncWithHttpInfo($accountId, $jobId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdGeometryWorkedGetAsyncWithHttpInfo
     *
     * Get a job's worked geometry as series of placement polygons.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdGeometryWorkedGetAsyncWithHttpInfo($accountId, $jobId)
    {
        $returnType = '\Tracmap\Model\GeoJSONFeatureList';
        $request = $this->accountsAccountIdJobsJobIdGeometryWorkedGetRequest($accountId, $jobId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdGeometryWorkedGet'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdGeometryWorkedGetRequest($accountId, $jobId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdGeometryWorkedGet'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsJobIdGeometryWorkedGet, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdGeometryWorkedGet'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling JobApi.accountsAccountIdJobsJobIdGeometryWorkedGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/jobs/{job_id}/geometry/worked';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsJobIdGet
     *
     * Retrieve information about a specific job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\JobRead
     */
    public function accountsAccountIdJobsJobIdGet($accountId, $jobId)
    {
        list($response) = $this->accountsAccountIdJobsJobIdGetWithHttpInfo($accountId, $jobId);
        return $response;
    }

    /**
     * Operation accountsAccountIdJobsJobIdGetWithHttpInfo
     *
     * Retrieve information about a specific job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\JobRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdGetWithHttpInfo($accountId, $jobId)
    {
        $returnType = '\Tracmap\Model\JobRead';
        $request = $this->accountsAccountIdJobsJobIdGetRequest($accountId, $jobId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\JobRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdGetAsync
     *
     * Retrieve information about a specific job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdGetAsync($accountId, $jobId)
    {
        return $this->accountsAccountIdJobsJobIdGetAsyncWithHttpInfo($accountId, $jobId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdGetAsyncWithHttpInfo
     *
     * Retrieve information about a specific job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdGetAsyncWithHttpInfo($accountId, $jobId)
    {
        $returnType = '\Tracmap\Model\JobRead';
        $request = $this->accountsAccountIdJobsJobIdGetRequest($accountId, $jobId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdGet'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdGetRequest($accountId, $jobId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdGet'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsJobIdGet, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdGet'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling JobApi.accountsAccountIdJobsJobIdGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/jobs/{job_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsJobIdPatch
     *
     * Modify an existing job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\JobBase $job New detailed description of notes to attach to job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\JobRead
     */
    public function accountsAccountIdJobsJobIdPatch($accountId, $jobId, $job)
    {
        list($response) = $this->accountsAccountIdJobsJobIdPatchWithHttpInfo($accountId, $jobId, $job);
        return $response;
    }

    /**
     * Operation accountsAccountIdJobsJobIdPatchWithHttpInfo
     *
     * Modify an existing job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\JobBase $job New detailed description of notes to attach to job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\JobRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdPatchWithHttpInfo($accountId, $jobId, $job)
    {
        $returnType = '\Tracmap\Model\JobRead';
        $request = $this->accountsAccountIdJobsJobIdPatchRequest($accountId, $jobId, $job);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\JobRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdPatchAsync
     *
     * Modify an existing job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\JobBase $job New detailed description of notes to attach to job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdPatchAsync($accountId, $jobId, $job)
    {
        return $this->accountsAccountIdJobsJobIdPatchAsyncWithHttpInfo($accountId, $jobId, $job)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdPatchAsyncWithHttpInfo
     *
     * Modify an existing job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\JobBase $job New detailed description of notes to attach to job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdPatchAsyncWithHttpInfo($accountId, $jobId, $job)
    {
        $returnType = '\Tracmap\Model\JobRead';
        $request = $this->accountsAccountIdJobsJobIdPatchRequest($accountId, $jobId, $job);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdPatch'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\JobBase $job New detailed description of notes to attach to job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdPatchRequest($accountId, $jobId, $job)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdPatch'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsJobIdPatch, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdPatch'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling JobApi.accountsAccountIdJobsJobIdPatch, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'job' is set
        if ($job === null || (is_array($job) && count($job) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job when calling accountsAccountIdJobsJobIdPatch'
            );
        }

        $resourcePath = '/accounts/{account_id}/jobs/{job_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($job)) {
            $_tempBody = $job;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsJobIdReportOptions
     *
     * Returns information about whether reports can be requested for the given job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountIdJobsJobIdReportOptions($accountId, $jobId)
    {
        $this->accountsAccountIdJobsJobIdReportOptionsWithHttpInfo($accountId, $jobId);
    }

    /**
     * Operation accountsAccountIdJobsJobIdReportOptionsWithHttpInfo
     *
     * Returns information about whether reports can be requested for the given job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdReportOptionsWithHttpInfo($accountId, $jobId)
    {
        $returnType = '';
        $request = $this->accountsAccountIdJobsJobIdReportOptionsRequest($accountId, $jobId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdReportOptionsAsync
     *
     * Returns information about whether reports can be requested for the given job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdReportOptionsAsync($accountId, $jobId)
    {
        return $this->accountsAccountIdJobsJobIdReportOptionsAsyncWithHttpInfo($accountId, $jobId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdReportOptionsAsyncWithHttpInfo
     *
     * Returns information about whether reports can be requested for the given job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdReportOptionsAsyncWithHttpInfo($accountId, $jobId)
    {
        $returnType = '';
        $request = $this->accountsAccountIdJobsJobIdReportOptionsRequest($accountId, $jobId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdReportOptions'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdReportOptionsRequest($accountId, $jobId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdReportOptions'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsJobIdReportOptions, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdReportOptions'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling JobApi.accountsAccountIdJobsJobIdReportOptions, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/jobs/{job_id}/report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'OPTIONS',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsJobIdReportPost
     *
     * Request a contractor report be sent to a specified email address.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\Content $content Information about where the generated report should be sent. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountIdJobsJobIdReportPost($accountId, $jobId, $content)
    {
        $this->accountsAccountIdJobsJobIdReportPostWithHttpInfo($accountId, $jobId, $content);
    }

    /**
     * Operation accountsAccountIdJobsJobIdReportPostWithHttpInfo
     *
     * Request a contractor report be sent to a specified email address.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\Content $content Information about where the generated report should be sent. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdReportPostWithHttpInfo($accountId, $jobId, $content)
    {
        $returnType = '';
        $request = $this->accountsAccountIdJobsJobIdReportPostRequest($accountId, $jobId, $content);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdReportPostAsync
     *
     * Request a contractor report be sent to a specified email address.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\Content $content Information about where the generated report should be sent. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdReportPostAsync($accountId, $jobId, $content)
    {
        return $this->accountsAccountIdJobsJobIdReportPostAsyncWithHttpInfo($accountId, $jobId, $content)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdReportPostAsyncWithHttpInfo
     *
     * Request a contractor report be sent to a specified email address.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\Content $content Information about where the generated report should be sent. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdReportPostAsyncWithHttpInfo($accountId, $jobId, $content)
    {
        $returnType = '';
        $request = $this->accountsAccountIdJobsJobIdReportPostRequest($accountId, $jobId, $content);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdReportPost'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\Content $content Information about where the generated report should be sent. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdReportPostRequest($accountId, $jobId, $content)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdReportPost'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsJobIdReportPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdReportPost'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling JobApi.accountsAccountIdJobsJobIdReportPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'content' is set
        if ($content === null || (is_array($content) && count($content) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content when calling accountsAccountIdJobsJobIdReportPost'
            );
        }

        $resourcePath = '/accounts/{account_id}/jobs/{job_id}/report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($content)) {
            $_tempBody = $content;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsJobIdVehicleSummaryDaysGet
     *
     * Get a job's usage summary data by vehicle.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function accountsAccountIdJobsJobIdVehicleSummaryDaysGet($accountId, $jobId)
    {
        list($response) = $this->accountsAccountIdJobsJobIdVehicleSummaryDaysGetWithHttpInfo($accountId, $jobId);
        return $response;
    }

    /**
     * Operation accountsAccountIdJobsJobIdVehicleSummaryDaysGetWithHttpInfo
     *
     * Get a job's usage summary data by vehicle.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdVehicleSummaryDaysGetWithHttpInfo($accountId, $jobId)
    {
        $returnType = 'object';
        $request = $this->accountsAccountIdJobsJobIdVehicleSummaryDaysGetRequest($accountId, $jobId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdVehicleSummaryDaysGetAsync
     *
     * Get a job's usage summary data by vehicle.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdVehicleSummaryDaysGetAsync($accountId, $jobId)
    {
        return $this->accountsAccountIdJobsJobIdVehicleSummaryDaysGetAsyncWithHttpInfo($accountId, $jobId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdVehicleSummaryDaysGetAsyncWithHttpInfo
     *
     * Get a job's usage summary data by vehicle.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdVehicleSummaryDaysGetAsyncWithHttpInfo($accountId, $jobId)
    {
        $returnType = 'object';
        $request = $this->accountsAccountIdJobsJobIdVehicleSummaryDaysGetRequest($accountId, $jobId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdVehicleSummaryDaysGet'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdVehicleSummaryDaysGetRequest($accountId, $jobId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdVehicleSummaryDaysGet'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsJobIdVehicleSummaryDaysGet, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdVehicleSummaryDaysGet'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling JobApi.accountsAccountIdJobsJobIdVehicleSummaryDaysGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/jobs/{job_id}/vehicle/summary/days';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsJobIdVehicleSummaryGet
     *
     * Get a job's usage summary data by vehicle.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\JobVehicleSummaryRead
     */
    public function accountsAccountIdJobsJobIdVehicleSummaryGet($accountId, $jobId)
    {
        list($response) = $this->accountsAccountIdJobsJobIdVehicleSummaryGetWithHttpInfo($accountId, $jobId);
        return $response;
    }

    /**
     * Operation accountsAccountIdJobsJobIdVehicleSummaryGetWithHttpInfo
     *
     * Get a job's usage summary data by vehicle.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\JobVehicleSummaryRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdVehicleSummaryGetWithHttpInfo($accountId, $jobId)
    {
        $returnType = '\Tracmap\Model\JobVehicleSummaryRead';
        $request = $this->accountsAccountIdJobsJobIdVehicleSummaryGetRequest($accountId, $jobId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\JobVehicleSummaryRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdVehicleSummaryGetAsync
     *
     * Get a job's usage summary data by vehicle.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdVehicleSummaryGetAsync($accountId, $jobId)
    {
        return $this->accountsAccountIdJobsJobIdVehicleSummaryGetAsyncWithHttpInfo($accountId, $jobId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdVehicleSummaryGetAsyncWithHttpInfo
     *
     * Get a job's usage summary data by vehicle.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdVehicleSummaryGetAsyncWithHttpInfo($accountId, $jobId)
    {
        $returnType = '\Tracmap\Model\JobVehicleSummaryRead';
        $request = $this->accountsAccountIdJobsJobIdVehicleSummaryGetRequest($accountId, $jobId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdVehicleSummaryGet'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdVehicleSummaryGetRequest($accountId, $jobId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdVehicleSummaryGet'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsJobIdVehicleSummaryGet, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdVehicleSummaryGet'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling JobApi.accountsAccountIdJobsJobIdVehicleSummaryGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/jobs/{job_id}/vehicle/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsJobIdYieldGet
     *
     * Get a job's geospatial yield data.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\YieldRead
     */
    public function accountsAccountIdJobsJobIdYieldGet($accountId, $jobId)
    {
        list($response) = $this->accountsAccountIdJobsJobIdYieldGetWithHttpInfo($accountId, $jobId);
        return $response;
    }

    /**
     * Operation accountsAccountIdJobsJobIdYieldGetWithHttpInfo
     *
     * Get a job's geospatial yield data.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\YieldRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdYieldGetWithHttpInfo($accountId, $jobId)
    {
        $returnType = '\Tracmap\Model\YieldRead';
        $request = $this->accountsAccountIdJobsJobIdYieldGetRequest($accountId, $jobId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\YieldRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdYieldGetAsync
     *
     * Get a job's geospatial yield data.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdYieldGetAsync($accountId, $jobId)
    {
        return $this->accountsAccountIdJobsJobIdYieldGetAsyncWithHttpInfo($accountId, $jobId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdYieldGetAsyncWithHttpInfo
     *
     * Get a job's geospatial yield data.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdYieldGetAsyncWithHttpInfo($accountId, $jobId)
    {
        $returnType = '\Tracmap\Model\YieldRead';
        $request = $this->accountsAccountIdJobsJobIdYieldGetRequest($accountId, $jobId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdYieldGet'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdYieldGetRequest($accountId, $jobId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdYieldGet'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsJobIdYieldGet, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdYieldGet'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling JobApi.accountsAccountIdJobsJobIdYieldGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/jobs/{job_id}/yield';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsPost
     *
     * Create a new job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  \Tracmap\Model\JobWrite $job Job to be created. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\JobRead
     */
    public function accountsAccountIdJobsPost($accountId, $job)
    {
        list($response) = $this->accountsAccountIdJobsPostWithHttpInfo($accountId, $job);
        return $response;
    }

    /**
     * Operation accountsAccountIdJobsPostWithHttpInfo
     *
     * Create a new job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  \Tracmap\Model\JobWrite $job Job to be created. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\JobRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsPostWithHttpInfo($accountId, $job)
    {
        $returnType = '\Tracmap\Model\JobRead';
        $request = $this->accountsAccountIdJobsPostRequest($accountId, $job);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\JobRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsPostAsync
     *
     * Create a new job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  \Tracmap\Model\JobWrite $job Job to be created. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsPostAsync($accountId, $job)
    {
        return $this->accountsAccountIdJobsPostAsyncWithHttpInfo($accountId, $job)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsPostAsyncWithHttpInfo
     *
     * Create a new job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  \Tracmap\Model\JobWrite $job Job to be created. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsPostAsyncWithHttpInfo($accountId, $job)
    {
        $returnType = '\Tracmap\Model\JobRead';
        $request = $this->accountsAccountIdJobsPostRequest($accountId, $job);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsPost'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  \Tracmap\Model\JobWrite $job Job to be created. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsPostRequest($accountId, $job)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsPost'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling JobApi.accountsAccountIdJobsPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'job' is set
        if ($job === null || (is_array($job) && count($job) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job when calling accountsAccountIdJobsPost'
            );
        }

        $resourcePath = '/accounts/{account_id}/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($job)) {
            $_tempBody = $job;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directJobPost
     *
     * Create a new job.
     *
     * @param  \Tracmap\Model\JobWrite $job Job to be created. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\JobDirectRead
     */
    public function directJobPost($job)
    {
        list($response) = $this->directJobPostWithHttpInfo($job);
        return $response;
    }

    /**
     * Operation directJobPostWithHttpInfo
     *
     * Create a new job.
     *
     * @param  \Tracmap\Model\JobWrite $job Job to be created. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\JobDirectRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function directJobPostWithHttpInfo($job)
    {
        $returnType = '\Tracmap\Model\JobDirectRead';
        $request = $this->directJobPostRequest($job);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\JobDirectRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directJobPostAsync
     *
     * Create a new job.
     *
     * @param  \Tracmap\Model\JobWrite $job Job to be created. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directJobPostAsync($job)
    {
        return $this->directJobPostAsyncWithHttpInfo($job)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directJobPostAsyncWithHttpInfo
     *
     * Create a new job.
     *
     * @param  \Tracmap\Model\JobWrite $job Job to be created. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directJobPostAsyncWithHttpInfo($job)
    {
        $returnType = '\Tracmap\Model\JobDirectRead';
        $request = $this->directJobPostRequest($job);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directJobPost'
     *
     * @param  \Tracmap\Model\JobWrite $job Job to be created. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function directJobPostRequest($job)
    {
        // verify the required parameter 'job' is set
        if ($job === null || (is_array($job) && count($job) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job when calling directJobPost'
            );
        }

        $resourcePath = '/direct/job';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($job)) {
            $_tempBody = $job;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
