<?php
/**
 * MapApi
 * PHP version 5
 *
 * @category Class
 * @package  Tracmap
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TracMap API
 *
 * The TracMap API allows you to create and manage __Jobs__, __Products__, and __Maps__ on TracMap Online.
 *
 * OpenAPI spec version: 1.0.25
 * Contact: api@tracmap.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tracmap\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Tracmap\ApiException;
use Tracmap\Configuration;
use Tracmap\HeaderSelector;
use Tracmap\ObjectSerializer;

/**
 * MapApi Class Doc Comment
 *
 * @category Class
 * @package  Tracmap
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MapApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountsAccountIdMapsGet
     *
     * List of all available maps.
     *
     * @param  int $accountId The id of the account. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\MapListRead
     */
    public function accountsAccountIdMapsGet($accountId)
    {
        list($response) = $this->accountsAccountIdMapsGetWithHttpInfo($accountId);
        return $response;
    }

    /**
     * Operation accountsAccountIdMapsGetWithHttpInfo
     *
     * List of all available maps.
     *
     * @param  int $accountId The id of the account. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\MapListRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdMapsGetWithHttpInfo($accountId)
    {
        $returnType = '\Tracmap\Model\MapListRead';
        $request = $this->accountsAccountIdMapsGetRequest($accountId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\MapListRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdMapsGetAsync
     *
     * List of all available maps.
     *
     * @param  int $accountId The id of the account. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsGetAsync($accountId)
    {
        return $this->accountsAccountIdMapsGetAsyncWithHttpInfo($accountId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdMapsGetAsyncWithHttpInfo
     *
     * List of all available maps.
     *
     * @param  int $accountId The id of the account. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsGetAsyncWithHttpInfo($accountId)
    {
        $returnType = '\Tracmap\Model\MapListRead';
        $request = $this->accountsAccountIdMapsGetRequest($accountId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdMapsGet'
     *
     * @param  int $accountId The id of the account. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdMapsGetRequest($accountId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdMapsGet'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling MapApi.accountsAccountIdMapsGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/maps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdMapsMapIdDelete
     *
     * Delete a particular map.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountIdMapsMapIdDelete($accountId, $mapId)
    {
        $this->accountsAccountIdMapsMapIdDeleteWithHttpInfo($accountId, $mapId);
    }

    /**
     * Operation accountsAccountIdMapsMapIdDeleteWithHttpInfo
     *
     * Delete a particular map.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdMapsMapIdDeleteWithHttpInfo($accountId, $mapId)
    {
        $returnType = '';
        $request = $this->accountsAccountIdMapsMapIdDeleteRequest($accountId, $mapId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdMapsMapIdDeleteAsync
     *
     * Delete a particular map.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdDeleteAsync($accountId, $mapId)
    {
        return $this->accountsAccountIdMapsMapIdDeleteAsyncWithHttpInfo($accountId, $mapId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdMapsMapIdDeleteAsyncWithHttpInfo
     *
     * Delete a particular map.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdDeleteAsyncWithHttpInfo($accountId, $mapId)
    {
        $returnType = '';
        $request = $this->accountsAccountIdMapsMapIdDeleteRequest($accountId, $mapId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdMapsMapIdDelete'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdMapsMapIdDeleteRequest($accountId, $mapId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdMapsMapIdDelete'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling MapApi.accountsAccountIdMapsMapIdDelete, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'mapId' is set
        if ($mapId === null || (is_array($mapId) && count($mapId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapId when calling accountsAccountIdMapsMapIdDelete'
            );
        }
        if ($mapId < 1) {
            throw new \InvalidArgumentException('invalid value for "$mapId" when calling MapApi.accountsAccountIdMapsMapIdDelete, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/maps/{map_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($mapId !== null) {
            $resourcePath = str_replace(
                '{' . 'map_id' . '}',
                ObjectSerializer::toPathValue($mapId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdMapsMapIdGeometryGet
     *
     * Get a map's geometry information.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\GeoJSONFeatureList
     */
    public function accountsAccountIdMapsMapIdGeometryGet($accountId, $mapId)
    {
        list($response) = $this->accountsAccountIdMapsMapIdGeometryGetWithHttpInfo($accountId, $mapId);
        return $response;
    }

    /**
     * Operation accountsAccountIdMapsMapIdGeometryGetWithHttpInfo
     *
     * Get a map's geometry information.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\GeoJSONFeatureList, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdMapsMapIdGeometryGetWithHttpInfo($accountId, $mapId)
    {
        $returnType = '\Tracmap\Model\GeoJSONFeatureList';
        $request = $this->accountsAccountIdMapsMapIdGeometryGetRequest($accountId, $mapId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\GeoJSONFeatureList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdMapsMapIdGeometryGetAsync
     *
     * Get a map's geometry information.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdGeometryGetAsync($accountId, $mapId)
    {
        return $this->accountsAccountIdMapsMapIdGeometryGetAsyncWithHttpInfo($accountId, $mapId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdMapsMapIdGeometryGetAsyncWithHttpInfo
     *
     * Get a map's geometry information.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdGeometryGetAsyncWithHttpInfo($accountId, $mapId)
    {
        $returnType = '\Tracmap\Model\GeoJSONFeatureList';
        $request = $this->accountsAccountIdMapsMapIdGeometryGetRequest($accountId, $mapId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdMapsMapIdGeometryGet'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdMapsMapIdGeometryGetRequest($accountId, $mapId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdMapsMapIdGeometryGet'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling MapApi.accountsAccountIdMapsMapIdGeometryGet, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'mapId' is set
        if ($mapId === null || (is_array($mapId) && count($mapId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapId when calling accountsAccountIdMapsMapIdGeometryGet'
            );
        }
        if ($mapId < 1) {
            throw new \InvalidArgumentException('invalid value for "$mapId" when calling MapApi.accountsAccountIdMapsMapIdGeometryGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/maps/{map_id}/geometry';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($mapId !== null) {
            $resourcePath = str_replace(
                '{' . 'map_id' . '}',
                ObjectSerializer::toPathValue($mapId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdMapsMapIdGet
     *
     * Detailed information about a particular map.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\MapRead
     */
    public function accountsAccountIdMapsMapIdGet($accountId, $mapId)
    {
        list($response) = $this->accountsAccountIdMapsMapIdGetWithHttpInfo($accountId, $mapId);
        return $response;
    }

    /**
     * Operation accountsAccountIdMapsMapIdGetWithHttpInfo
     *
     * Detailed information about a particular map.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\MapRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdMapsMapIdGetWithHttpInfo($accountId, $mapId)
    {
        $returnType = '\Tracmap\Model\MapRead';
        $request = $this->accountsAccountIdMapsMapIdGetRequest($accountId, $mapId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\MapRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdMapsMapIdGetAsync
     *
     * Detailed information about a particular map.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdGetAsync($accountId, $mapId)
    {
        return $this->accountsAccountIdMapsMapIdGetAsyncWithHttpInfo($accountId, $mapId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdMapsMapIdGetAsyncWithHttpInfo
     *
     * Detailed information about a particular map.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdGetAsyncWithHttpInfo($accountId, $mapId)
    {
        $returnType = '\Tracmap\Model\MapRead';
        $request = $this->accountsAccountIdMapsMapIdGetRequest($accountId, $mapId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdMapsMapIdGet'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdMapsMapIdGetRequest($accountId, $mapId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdMapsMapIdGet'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling MapApi.accountsAccountIdMapsMapIdGet, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'mapId' is set
        if ($mapId === null || (is_array($mapId) && count($mapId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapId when calling accountsAccountIdMapsMapIdGet'
            );
        }
        if ($mapId < 1) {
            throw new \InvalidArgumentException('invalid value for "$mapId" when calling MapApi.accountsAccountIdMapsMapIdGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/maps/{map_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($mapId !== null) {
            $resourcePath = str_replace(
                '{' . 'map_id' . '}',
                ObjectSerializer::toPathValue($mapId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete
     *
     * Delete a marker from the map.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete($accountId, $mapId, $geoFeatureId)
    {
        $this->accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteWithHttpInfo($accountId, $mapId, $geoFeatureId);
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteWithHttpInfo
     *
     * Delete a marker from the map.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteWithHttpInfo($accountId, $mapId, $geoFeatureId)
    {
        $returnType = '';
        $request = $this->accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteRequest($accountId, $mapId, $geoFeatureId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteAsync
     *
     * Delete a marker from the map.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteAsync($accountId, $mapId, $geoFeatureId)
    {
        return $this->accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteAsyncWithHttpInfo($accountId, $mapId, $geoFeatureId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteAsyncWithHttpInfo
     *
     * Delete a marker from the map.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteAsyncWithHttpInfo($accountId, $mapId, $geoFeatureId)
    {
        $returnType = '';
        $request = $this->accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteRequest($accountId, $mapId, $geoFeatureId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete'
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteRequest($accountId, $mapId, $geoFeatureId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling MapApi.accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'mapId' is set
        if ($mapId === null || (is_array($mapId) && count($mapId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapId when calling accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete'
            );
        }
        if ($mapId < 1) {
            throw new \InvalidArgumentException('invalid value for "$mapId" when calling MapApi.accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'geoFeatureId' is set
        if ($geoFeatureId === null || (is_array($geoFeatureId) && count($geoFeatureId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $geoFeatureId when calling accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete'
            );
        }
        if ($geoFeatureId < 1) {
            throw new \InvalidArgumentException('invalid value for "$geoFeatureId" when calling MapApi.accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/maps/{map_id}/markers/{geo_feature_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($mapId !== null) {
            $resourcePath = str_replace(
                '{' . 'map_id' . '}',
                ObjectSerializer::toPathValue($mapId),
                $resourcePath
            );
        }
        // path params
        if ($geoFeatureId !== null) {
            $resourcePath = str_replace(
                '{' . 'geo_feature_id' . '}',
                ObjectSerializer::toPathValue($geoFeatureId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch
     *
     * Update details of a marker.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     * @param  \Tracmap\Model\MarkerPatch $marker marker (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch($accountId, $mapId, $geoFeatureId, $marker)
    {
        list($response) = $this->accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchWithHttpInfo($accountId, $mapId, $geoFeatureId, $marker);
        return $response;
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchWithHttpInfo
     *
     * Update details of a marker.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     * @param  \Tracmap\Model\MarkerPatch $marker (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchWithHttpInfo($accountId, $mapId, $geoFeatureId, $marker)
    {
        $returnType = 'int';
        $request = $this->accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchRequest($accountId, $mapId, $geoFeatureId, $marker);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchAsync
     *
     * Update details of a marker.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     * @param  \Tracmap\Model\MarkerPatch $marker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchAsync($accountId, $mapId, $geoFeatureId, $marker)
    {
        return $this->accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchAsyncWithHttpInfo($accountId, $mapId, $geoFeatureId, $marker)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchAsyncWithHttpInfo
     *
     * Update details of a marker.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     * @param  \Tracmap\Model\MarkerPatch $marker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchAsyncWithHttpInfo($accountId, $mapId, $geoFeatureId, $marker)
    {
        $returnType = 'int';
        $request = $this->accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchRequest($accountId, $mapId, $geoFeatureId, $marker);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch'
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     * @param  \Tracmap\Model\MarkerPatch $marker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchRequest($accountId, $mapId, $geoFeatureId, $marker)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling MapApi.accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'mapId' is set
        if ($mapId === null || (is_array($mapId) && count($mapId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapId when calling accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch'
            );
        }
        if ($mapId < 1) {
            throw new \InvalidArgumentException('invalid value for "$mapId" when calling MapApi.accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'geoFeatureId' is set
        if ($geoFeatureId === null || (is_array($geoFeatureId) && count($geoFeatureId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $geoFeatureId when calling accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch'
            );
        }
        if ($geoFeatureId < 1) {
            throw new \InvalidArgumentException('invalid value for "$geoFeatureId" when calling MapApi.accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marker' is set
        if ($marker === null || (is_array($marker) && count($marker) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marker when calling accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch'
            );
        }

        $resourcePath = '/accounts/{account_id}/maps/{map_id}/markers/{geo_feature_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($mapId !== null) {
            $resourcePath = str_replace(
                '{' . 'map_id' . '}',
                ObjectSerializer::toPathValue($mapId),
                $resourcePath
            );
        }
        // path params
        if ($geoFeatureId !== null) {
            $resourcePath = str_replace(
                '{' . 'geo_feature_id' . '}',
                ObjectSerializer::toPathValue($geoFeatureId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($marker)) {
            $_tempBody = $marker;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersPost
     *
     * Create a new marker in the given map. The response body contains the identifier of the created feature.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map where the  marker is to be created. (required)
     * @param  \Tracmap\Model\MarkerWrite $marker marker (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function accountsAccountIdMapsMapIdMarkersPost($accountId, $mapId, $marker)
    {
        list($response) = $this->accountsAccountIdMapsMapIdMarkersPostWithHttpInfo($accountId, $mapId, $marker);
        return $response;
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersPostWithHttpInfo
     *
     * Create a new marker in the given map. The response body contains the identifier of the created feature.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map where the  marker is to be created. (required)
     * @param  \Tracmap\Model\MarkerWrite $marker (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdMapsMapIdMarkersPostWithHttpInfo($accountId, $mapId, $marker)
    {
        $returnType = 'int';
        $request = $this->accountsAccountIdMapsMapIdMarkersPostRequest($accountId, $mapId, $marker);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersPostAsync
     *
     * Create a new marker in the given map. The response body contains the identifier of the created feature.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map where the  marker is to be created. (required)
     * @param  \Tracmap\Model\MarkerWrite $marker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdMarkersPostAsync($accountId, $mapId, $marker)
    {
        return $this->accountsAccountIdMapsMapIdMarkersPostAsyncWithHttpInfo($accountId, $mapId, $marker)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersPostAsyncWithHttpInfo
     *
     * Create a new marker in the given map. The response body contains the identifier of the created feature.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map where the  marker is to be created. (required)
     * @param  \Tracmap\Model\MarkerWrite $marker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdMarkersPostAsyncWithHttpInfo($accountId, $mapId, $marker)
    {
        $returnType = 'int';
        $request = $this->accountsAccountIdMapsMapIdMarkersPostRequest($accountId, $mapId, $marker);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdMapsMapIdMarkersPost'
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map where the  marker is to be created. (required)
     * @param  \Tracmap\Model\MarkerWrite $marker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdMapsMapIdMarkersPostRequest($accountId, $mapId, $marker)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdMapsMapIdMarkersPost'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling MapApi.accountsAccountIdMapsMapIdMarkersPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'mapId' is set
        if ($mapId === null || (is_array($mapId) && count($mapId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapId when calling accountsAccountIdMapsMapIdMarkersPost'
            );
        }
        if ($mapId < 1) {
            throw new \InvalidArgumentException('invalid value for "$mapId" when calling MapApi.accountsAccountIdMapsMapIdMarkersPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marker' is set
        if ($marker === null || (is_array($marker) && count($marker) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marker when calling accountsAccountIdMapsMapIdMarkersPost'
            );
        }

        $resourcePath = '/accounts/{account_id}/maps/{map_id}/markers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($mapId !== null) {
            $resourcePath = str_replace(
                '{' . 'map_id' . '}',
                ObjectSerializer::toPathValue($mapId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($marker)) {
            $_tempBody = $marker;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdMapsMapIdPatch
     *
     * Update an existing map.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     * @param  \Tracmap\Model\Map $map The new map geometry. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\MapRead
     */
    public function accountsAccountIdMapsMapIdPatch($accountId, $mapId, $map)
    {
        list($response) = $this->accountsAccountIdMapsMapIdPatchWithHttpInfo($accountId, $mapId, $map);
        return $response;
    }

    /**
     * Operation accountsAccountIdMapsMapIdPatchWithHttpInfo
     *
     * Update an existing map.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     * @param  \Tracmap\Model\Map $map The new map geometry. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\MapRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdMapsMapIdPatchWithHttpInfo($accountId, $mapId, $map)
    {
        $returnType = '\Tracmap\Model\MapRead';
        $request = $this->accountsAccountIdMapsMapIdPatchRequest($accountId, $mapId, $map);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\MapRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdMapsMapIdPatchAsync
     *
     * Update an existing map.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     * @param  \Tracmap\Model\Map $map The new map geometry. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdPatchAsync($accountId, $mapId, $map)
    {
        return $this->accountsAccountIdMapsMapIdPatchAsyncWithHttpInfo($accountId, $mapId, $map)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdMapsMapIdPatchAsyncWithHttpInfo
     *
     * Update an existing map.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     * @param  \Tracmap\Model\Map $map The new map geometry. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdPatchAsyncWithHttpInfo($accountId, $mapId, $map)
    {
        $returnType = '\Tracmap\Model\MapRead';
        $request = $this->accountsAccountIdMapsMapIdPatchRequest($accountId, $mapId, $map);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdMapsMapIdPatch'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $mapId The id of the map. (required)
     * @param  \Tracmap\Model\Map $map The new map geometry. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdMapsMapIdPatchRequest($accountId, $mapId, $map)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdMapsMapIdPatch'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling MapApi.accountsAccountIdMapsMapIdPatch, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'mapId' is set
        if ($mapId === null || (is_array($mapId) && count($mapId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapId when calling accountsAccountIdMapsMapIdPatch'
            );
        }
        if ($mapId < 1) {
            throw new \InvalidArgumentException('invalid value for "$mapId" when calling MapApi.accountsAccountIdMapsMapIdPatch, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'map' is set
        if ($map === null || (is_array($map) && count($map) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $map when calling accountsAccountIdMapsMapIdPatch'
            );
        }

        $resourcePath = '/accounts/{account_id}/maps/{map_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($mapId !== null) {
            $resourcePath = str_replace(
                '{' . 'map_id' . '}',
                ObjectSerializer::toPathValue($mapId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($map)) {
            $_tempBody = $map;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdMapsPost
     *
     * Create a new map.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  \Tracmap\Model\Map $map Map data, including geometry. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\MapRead
     */
    public function accountsAccountIdMapsPost($accountId, $map)
    {
        list($response) = $this->accountsAccountIdMapsPostWithHttpInfo($accountId, $map);
        return $response;
    }

    /**
     * Operation accountsAccountIdMapsPostWithHttpInfo
     *
     * Create a new map.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  \Tracmap\Model\Map $map Map data, including geometry. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\MapRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdMapsPostWithHttpInfo($accountId, $map)
    {
        $returnType = '\Tracmap\Model\MapRead';
        $request = $this->accountsAccountIdMapsPostRequest($accountId, $map);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\MapRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdMapsPostAsync
     *
     * Create a new map.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  \Tracmap\Model\Map $map Map data, including geometry. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsPostAsync($accountId, $map)
    {
        return $this->accountsAccountIdMapsPostAsyncWithHttpInfo($accountId, $map)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdMapsPostAsyncWithHttpInfo
     *
     * Create a new map.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  \Tracmap\Model\Map $map Map data, including geometry. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsPostAsyncWithHttpInfo($accountId, $map)
    {
        $returnType = '\Tracmap\Model\MapRead';
        $request = $this->accountsAccountIdMapsPostRequest($accountId, $map);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdMapsPost'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  \Tracmap\Model\Map $map Map data, including geometry. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdMapsPostRequest($accountId, $map)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdMapsPost'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling MapApi.accountsAccountIdMapsPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'map' is set
        if ($map === null || (is_array($map) && count($map) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $map when calling accountsAccountIdMapsPost'
            );
        }

        $resourcePath = '/accounts/{account_id}/maps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($map)) {
            $_tempBody = $map;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
