<?php
/**
 * DeviceApi
 * PHP version 5
 *
 * @category Class
 * @package  Tracmap
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TracMap API
 *
 * The TracMap API allows you to create and manage __Jobs__, __Products__, and __Maps__ on TracMap Online.
 *
 * OpenAPI spec version: 1.0.25
 * Contact: api@tracmap.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tracmap\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Tracmap\ApiException;
use Tracmap\Configuration;
use Tracmap\HeaderSelector;
use Tracmap\ObjectSerializer;

/**
 * DeviceApi Class Doc Comment
 *
 * @category Class
 * @package  Tracmap
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeviceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountsAccountIdJobsJobIdAssignPost
     *
     * Assign a job to one or more devices.
     *
     * @param  int $accountId The numeric identifier of the account that includes the job and target devices to be assigned. (required)
     * @param  int $jobId The numeric identifier of the job to be assigned. This is returned by POST **_/accounts/{account_id}/jobs** when creating a new job, or by GET **_/accounts/{account_id}/jobs** for existing jobs. (required)
     * @param  \Tracmap\Model\DeviceShortListRead $ownershipId List of *ownership_id* of the device(s) to which the job will be assigned. These are returned by GET from **_/accounts/{account_id}/devices**, or from the _Ownership ID_ column in the Display _Units table_ in the Tracmap Online Admin area. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\DeviceShortListRead
     */
    public function accountsAccountIdJobsJobIdAssignPost($accountId, $jobId, $ownershipId)
    {
        list($response) = $this->accountsAccountIdJobsJobIdAssignPostWithHttpInfo($accountId, $jobId, $ownershipId);
        return $response;
    }

    /**
     * Operation accountsAccountIdJobsJobIdAssignPostWithHttpInfo
     *
     * Assign a job to one or more devices.
     *
     * @param  int $accountId The numeric identifier of the account that includes the job and target devices to be assigned. (required)
     * @param  int $jobId The numeric identifier of the job to be assigned. This is returned by POST **_/accounts/{account_id}/jobs** when creating a new job, or by GET **_/accounts/{account_id}/jobs** for existing jobs. (required)
     * @param  \Tracmap\Model\DeviceShortListRead $ownershipId List of *ownership_id* of the device(s) to which the job will be assigned. These are returned by GET from **_/accounts/{account_id}/devices**, or from the _Ownership ID_ column in the Display _Units table_ in the Tracmap Online Admin area. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\DeviceShortListRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdAssignPostWithHttpInfo($accountId, $jobId, $ownershipId)
    {
        $returnType = '\Tracmap\Model\DeviceShortListRead';
        $request = $this->accountsAccountIdJobsJobIdAssignPostRequest($accountId, $jobId, $ownershipId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\DeviceShortListRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdAssignPostAsync
     *
     * Assign a job to one or more devices.
     *
     * @param  int $accountId The numeric identifier of the account that includes the job and target devices to be assigned. (required)
     * @param  int $jobId The numeric identifier of the job to be assigned. This is returned by POST **_/accounts/{account_id}/jobs** when creating a new job, or by GET **_/accounts/{account_id}/jobs** for existing jobs. (required)
     * @param  \Tracmap\Model\DeviceShortListRead $ownershipId List of *ownership_id* of the device(s) to which the job will be assigned. These are returned by GET from **_/accounts/{account_id}/devices**, or from the _Ownership ID_ column in the Display _Units table_ in the Tracmap Online Admin area. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdAssignPostAsync($accountId, $jobId, $ownershipId)
    {
        return $this->accountsAccountIdJobsJobIdAssignPostAsyncWithHttpInfo($accountId, $jobId, $ownershipId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdAssignPostAsyncWithHttpInfo
     *
     * Assign a job to one or more devices.
     *
     * @param  int $accountId The numeric identifier of the account that includes the job and target devices to be assigned. (required)
     * @param  int $jobId The numeric identifier of the job to be assigned. This is returned by POST **_/accounts/{account_id}/jobs** when creating a new job, or by GET **_/accounts/{account_id}/jobs** for existing jobs. (required)
     * @param  \Tracmap\Model\DeviceShortListRead $ownershipId List of *ownership_id* of the device(s) to which the job will be assigned. These are returned by GET from **_/accounts/{account_id}/devices**, or from the _Ownership ID_ column in the Display _Units table_ in the Tracmap Online Admin area. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdAssignPostAsyncWithHttpInfo($accountId, $jobId, $ownershipId)
    {
        $returnType = '\Tracmap\Model\DeviceShortListRead';
        $request = $this->accountsAccountIdJobsJobIdAssignPostRequest($accountId, $jobId, $ownershipId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdAssignPost'
     *
     * @param  int $accountId The numeric identifier of the account that includes the job and target devices to be assigned. (required)
     * @param  int $jobId The numeric identifier of the job to be assigned. This is returned by POST **_/accounts/{account_id}/jobs** when creating a new job, or by GET **_/accounts/{account_id}/jobs** for existing jobs. (required)
     * @param  \Tracmap\Model\DeviceShortListRead $ownershipId List of *ownership_id* of the device(s) to which the job will be assigned. These are returned by GET from **_/accounts/{account_id}/devices**, or from the _Ownership ID_ column in the Display _Units table_ in the Tracmap Online Admin area. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdAssignPostRequest($accountId, $jobId, $ownershipId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdAssignPost'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling DeviceApi.accountsAccountIdJobsJobIdAssignPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdAssignPost'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling DeviceApi.accountsAccountIdJobsJobIdAssignPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'ownershipId' is set
        if ($ownershipId === null || (is_array($ownershipId) && count($ownershipId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ownershipId when calling accountsAccountIdJobsJobIdAssignPost'
            );
        }

        $resourcePath = '/accounts/{account_id}/jobs/{job_id}/assign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($ownershipId)) {
            $_tempBody = $ownershipId;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deviceGet
     *
     * Returns a 'root' document for a headunit as the starting point to navigate the REST graph.
     *
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\DeviceRootDocument
     */
    public function deviceGet()
    {
        list($response) = $this->deviceGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation deviceGetWithHttpInfo
     *
     * Returns a 'root' document for a headunit as the starting point to navigate the REST graph.
     *
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\DeviceRootDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function deviceGetWithHttpInfo()
    {
        $returnType = '\Tracmap\Model\DeviceRootDocument';
        $request = $this->deviceGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\DeviceRootDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deviceGetAsync
     *
     * Returns a 'root' document for a headunit as the starting point to navigate the REST graph.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deviceGetAsync()
    {
        return $this->deviceGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deviceGetAsyncWithHttpInfo
     *
     * Returns a 'root' document for a headunit as the starting point to navigate the REST graph.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deviceGetAsyncWithHttpInfo()
    {
        $returnType = '\Tracmap\Model\DeviceRootDocument';
        $request = $this->deviceGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deviceGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deviceGetRequest()
    {

        $resourcePath = '/device';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation devicesDeviceIdJobsGet
     *
     * Returns a list of Job Summary resources with basic job information.
     *
     * @param  string $deviceId The name of the device. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\JobListRead
     */
    public function devicesDeviceIdJobsGet($deviceId)
    {
        list($response) = $this->devicesDeviceIdJobsGetWithHttpInfo($deviceId);
        return $response;
    }

    /**
     * Operation devicesDeviceIdJobsGetWithHttpInfo
     *
     * Returns a list of Job Summary resources with basic job information.
     *
     * @param  string $deviceId The name of the device. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\JobListRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function devicesDeviceIdJobsGetWithHttpInfo($deviceId)
    {
        $returnType = '\Tracmap\Model\JobListRead';
        $request = $this->devicesDeviceIdJobsGetRequest($deviceId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\JobListRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation devicesDeviceIdJobsGetAsync
     *
     * Returns a list of Job Summary resources with basic job information.
     *
     * @param  string $deviceId The name of the device. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function devicesDeviceIdJobsGetAsync($deviceId)
    {
        return $this->devicesDeviceIdJobsGetAsyncWithHttpInfo($deviceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation devicesDeviceIdJobsGetAsyncWithHttpInfo
     *
     * Returns a list of Job Summary resources with basic job information.
     *
     * @param  string $deviceId The name of the device. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function devicesDeviceIdJobsGetAsyncWithHttpInfo($deviceId)
    {
        $returnType = '\Tracmap\Model\JobListRead';
        $request = $this->devicesDeviceIdJobsGetRequest($deviceId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'devicesDeviceIdJobsGet'
     *
     * @param  string $deviceId The name of the device. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function devicesDeviceIdJobsGetRequest($deviceId)
    {
        // verify the required parameter 'deviceId' is set
        if ($deviceId === null || (is_array($deviceId) && count($deviceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deviceId when calling devicesDeviceIdJobsGet'
            );
        }
        if ($deviceId < 1) {
            throw new \InvalidArgumentException('invalid value for "$deviceId" when calling DeviceApi.devicesDeviceIdJobsGet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/devices/{device_id}/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($deviceId !== null) {
            $resourcePath = str_replace(
                '{' . 'device_id' . '}',
                ObjectSerializer::toPathValue($deviceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation devicesDeviceIdPositionsPost
     *
     * Post a collection of sequential positions of a device or vehicle.
     *
     * @param  string $deviceId The name of the device. (required)
     * @param  \Tracmap\Model\DevicePositions $positions Position array. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function devicesDeviceIdPositionsPost($deviceId, $positions)
    {
        $this->devicesDeviceIdPositionsPostWithHttpInfo($deviceId, $positions);
    }

    /**
     * Operation devicesDeviceIdPositionsPostWithHttpInfo
     *
     * Post a collection of sequential positions of a device or vehicle.
     *
     * @param  string $deviceId The name of the device. (required)
     * @param  \Tracmap\Model\DevicePositions $positions Position array. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function devicesDeviceIdPositionsPostWithHttpInfo($deviceId, $positions)
    {
        $returnType = '';
        $request = $this->devicesDeviceIdPositionsPostRequest($deviceId, $positions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation devicesDeviceIdPositionsPostAsync
     *
     * Post a collection of sequential positions of a device or vehicle.
     *
     * @param  string $deviceId The name of the device. (required)
     * @param  \Tracmap\Model\DevicePositions $positions Position array. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function devicesDeviceIdPositionsPostAsync($deviceId, $positions)
    {
        return $this->devicesDeviceIdPositionsPostAsyncWithHttpInfo($deviceId, $positions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation devicesDeviceIdPositionsPostAsyncWithHttpInfo
     *
     * Post a collection of sequential positions of a device or vehicle.
     *
     * @param  string $deviceId The name of the device. (required)
     * @param  \Tracmap\Model\DevicePositions $positions Position array. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function devicesDeviceIdPositionsPostAsyncWithHttpInfo($deviceId, $positions)
    {
        $returnType = '';
        $request = $this->devicesDeviceIdPositionsPostRequest($deviceId, $positions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'devicesDeviceIdPositionsPost'
     *
     * @param  string $deviceId The name of the device. (required)
     * @param  \Tracmap\Model\DevicePositions $positions Position array. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function devicesDeviceIdPositionsPostRequest($deviceId, $positions)
    {
        // verify the required parameter 'deviceId' is set
        if ($deviceId === null || (is_array($deviceId) && count($deviceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deviceId when calling devicesDeviceIdPositionsPost'
            );
        }
        if ($deviceId < 1) {
            throw new \InvalidArgumentException('invalid value for "$deviceId" when calling DeviceApi.devicesDeviceIdPositionsPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'positions' is set
        if ($positions === null || (is_array($positions) && count($positions) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $positions when calling devicesDeviceIdPositionsPost'
            );
        }

        $resourcePath = '/devices/{device_id}/positions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($deviceId !== null) {
            $resourcePath = str_replace(
                '{' . 'device_id' . '}',
                ObjectSerializer::toPathValue($deviceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($positions)) {
            $_tempBody = $positions;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
