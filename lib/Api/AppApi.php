<?php
/**
 * AppApi
 * PHP version 5
 *
 * @category Class
 * @package  Tracmap
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TracMap API
 *
 * The TracMap API allows you to create and manage __Jobs__, __Products__, and __Maps__ on TracMap Online.
 *
 * OpenAPI spec version: 1.0.25
 * Contact: api@tracmap.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Tracmap\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Tracmap\ApiException;
use Tracmap\Configuration;
use Tracmap\HeaderSelector;
use Tracmap\ObjectSerializer;

/**
 * AppApi Class Doc Comment
 *
 * @category Class
 * @package  Tracmap
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AppApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountsAccountIdJobsJobIdReportOptions
     *
     * Returns information about whether reports can be requested for the given job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountIdJobsJobIdReportOptions($accountId, $jobId)
    {
        $this->accountsAccountIdJobsJobIdReportOptionsWithHttpInfo($accountId, $jobId);
    }

    /**
     * Operation accountsAccountIdJobsJobIdReportOptionsWithHttpInfo
     *
     * Returns information about whether reports can be requested for the given job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdReportOptionsWithHttpInfo($accountId, $jobId)
    {
        $returnType = '';
        $request = $this->accountsAccountIdJobsJobIdReportOptionsRequest($accountId, $jobId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdReportOptionsAsync
     *
     * Returns information about whether reports can be requested for the given job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdReportOptionsAsync($accountId, $jobId)
    {
        return $this->accountsAccountIdJobsJobIdReportOptionsAsyncWithHttpInfo($accountId, $jobId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdReportOptionsAsyncWithHttpInfo
     *
     * Returns information about whether reports can be requested for the given job.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdReportOptionsAsyncWithHttpInfo($accountId, $jobId)
    {
        $returnType = '';
        $request = $this->accountsAccountIdJobsJobIdReportOptionsRequest($accountId, $jobId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdReportOptions'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdReportOptionsRequest($accountId, $jobId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdReportOptions'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling AppApi.accountsAccountIdJobsJobIdReportOptions, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdReportOptions'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling AppApi.accountsAccountIdJobsJobIdReportOptions, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/jobs/{job_id}/report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'OPTIONS',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdJobsJobIdReportPost
     *
     * Request a contractor report be sent to a specified email address.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\Content $content Information about where the generated report should be sent. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountIdJobsJobIdReportPost($accountId, $jobId, $content)
    {
        $this->accountsAccountIdJobsJobIdReportPostWithHttpInfo($accountId, $jobId, $content);
    }

    /**
     * Operation accountsAccountIdJobsJobIdReportPostWithHttpInfo
     *
     * Request a contractor report be sent to a specified email address.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\Content $content Information about where the generated report should be sent. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdJobsJobIdReportPostWithHttpInfo($accountId, $jobId, $content)
    {
        $returnType = '';
        $request = $this->accountsAccountIdJobsJobIdReportPostRequest($accountId, $jobId, $content);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdJobsJobIdReportPostAsync
     *
     * Request a contractor report be sent to a specified email address.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\Content $content Information about where the generated report should be sent. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdReportPostAsync($accountId, $jobId, $content)
    {
        return $this->accountsAccountIdJobsJobIdReportPostAsyncWithHttpInfo($accountId, $jobId, $content)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdJobsJobIdReportPostAsyncWithHttpInfo
     *
     * Request a contractor report be sent to a specified email address.
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\Content $content Information about where the generated report should be sent. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdJobsJobIdReportPostAsyncWithHttpInfo($accountId, $jobId, $content)
    {
        $returnType = '';
        $request = $this->accountsAccountIdJobsJobIdReportPostRequest($accountId, $jobId, $content);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdJobsJobIdReportPost'
     *
     * @param  int $accountId The id of the account. (required)
     * @param  int $jobId The id of the job. (required)
     * @param  \Tracmap\Model\Content $content Information about where the generated report should be sent. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdJobsJobIdReportPostRequest($accountId, $jobId, $content)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdJobsJobIdReportPost'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling AppApi.accountsAccountIdJobsJobIdReportPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'jobId' is set
        if ($jobId === null || (is_array($jobId) && count($jobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobId when calling accountsAccountIdJobsJobIdReportPost'
            );
        }
        if ($jobId < 1) {
            throw new \InvalidArgumentException('invalid value for "$jobId" when calling AppApi.accountsAccountIdJobsJobIdReportPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'content' is set
        if ($content === null || (is_array($content) && count($content) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content when calling accountsAccountIdJobsJobIdReportPost'
            );
        }

        $resourcePath = '/accounts/{account_id}/jobs/{job_id}/report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($jobId !== null) {
            $resourcePath = str_replace(
                '{' . 'job_id' . '}',
                ObjectSerializer::toPathValue($jobId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($content)) {
            $_tempBody = $content;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete
     *
     * Delete a marker from the map.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete($accountId, $mapId, $geoFeatureId)
    {
        $this->accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteWithHttpInfo($accountId, $mapId, $geoFeatureId);
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteWithHttpInfo
     *
     * Delete a marker from the map.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteWithHttpInfo($accountId, $mapId, $geoFeatureId)
    {
        $returnType = '';
        $request = $this->accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteRequest($accountId, $mapId, $geoFeatureId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteAsync
     *
     * Delete a marker from the map.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteAsync($accountId, $mapId, $geoFeatureId)
    {
        return $this->accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteAsyncWithHttpInfo($accountId, $mapId, $geoFeatureId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteAsyncWithHttpInfo
     *
     * Delete a marker from the map.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteAsyncWithHttpInfo($accountId, $mapId, $geoFeatureId)
    {
        $returnType = '';
        $request = $this->accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteRequest($accountId, $mapId, $geoFeatureId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete'
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdMapsMapIdMarkersGeoFeatureIdDeleteRequest($accountId, $mapId, $geoFeatureId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling AppApi.accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'mapId' is set
        if ($mapId === null || (is_array($mapId) && count($mapId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapId when calling accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete'
            );
        }
        if ($mapId < 1) {
            throw new \InvalidArgumentException('invalid value for "$mapId" when calling AppApi.accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'geoFeatureId' is set
        if ($geoFeatureId === null || (is_array($geoFeatureId) && count($geoFeatureId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $geoFeatureId when calling accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete'
            );
        }
        if ($geoFeatureId < 1) {
            throw new \InvalidArgumentException('invalid value for "$geoFeatureId" when calling AppApi.accountsAccountIdMapsMapIdMarkersGeoFeatureIdDelete, must be bigger than or equal to 1.');
        }


        $resourcePath = '/accounts/{account_id}/maps/{map_id}/markers/{geo_feature_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($mapId !== null) {
            $resourcePath = str_replace(
                '{' . 'map_id' . '}',
                ObjectSerializer::toPathValue($mapId),
                $resourcePath
            );
        }
        // path params
        if ($geoFeatureId !== null) {
            $resourcePath = str_replace(
                '{' . 'geo_feature_id' . '}',
                ObjectSerializer::toPathValue($geoFeatureId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch
     *
     * Update details of a marker.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     * @param  \Tracmap\Model\MarkerPatch $marker marker (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch($accountId, $mapId, $geoFeatureId, $marker)
    {
        list($response) = $this->accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchWithHttpInfo($accountId, $mapId, $geoFeatureId, $marker);
        return $response;
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchWithHttpInfo
     *
     * Update details of a marker.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     * @param  \Tracmap\Model\MarkerPatch $marker (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchWithHttpInfo($accountId, $mapId, $geoFeatureId, $marker)
    {
        $returnType = 'int';
        $request = $this->accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchRequest($accountId, $mapId, $geoFeatureId, $marker);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchAsync
     *
     * Update details of a marker.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     * @param  \Tracmap\Model\MarkerPatch $marker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchAsync($accountId, $mapId, $geoFeatureId, $marker)
    {
        return $this->accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchAsyncWithHttpInfo($accountId, $mapId, $geoFeatureId, $marker)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchAsyncWithHttpInfo
     *
     * Update details of a marker.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     * @param  \Tracmap\Model\MarkerPatch $marker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchAsyncWithHttpInfo($accountId, $mapId, $geoFeatureId, $marker)
    {
        $returnType = 'int';
        $request = $this->accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchRequest($accountId, $mapId, $geoFeatureId, $marker);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch'
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map containing the marker. (required)
     * @param  int $geoFeatureId Identifier of marker to be deleted. (required)
     * @param  \Tracmap\Model\MarkerPatch $marker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatchRequest($accountId, $mapId, $geoFeatureId, $marker)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling AppApi.accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'mapId' is set
        if ($mapId === null || (is_array($mapId) && count($mapId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapId when calling accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch'
            );
        }
        if ($mapId < 1) {
            throw new \InvalidArgumentException('invalid value for "$mapId" when calling AppApi.accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'geoFeatureId' is set
        if ($geoFeatureId === null || (is_array($geoFeatureId) && count($geoFeatureId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $geoFeatureId when calling accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch'
            );
        }
        if ($geoFeatureId < 1) {
            throw new \InvalidArgumentException('invalid value for "$geoFeatureId" when calling AppApi.accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marker' is set
        if ($marker === null || (is_array($marker) && count($marker) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marker when calling accountsAccountIdMapsMapIdMarkersGeoFeatureIdPatch'
            );
        }

        $resourcePath = '/accounts/{account_id}/maps/{map_id}/markers/{geo_feature_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($mapId !== null) {
            $resourcePath = str_replace(
                '{' . 'map_id' . '}',
                ObjectSerializer::toPathValue($mapId),
                $resourcePath
            );
        }
        // path params
        if ($geoFeatureId !== null) {
            $resourcePath = str_replace(
                '{' . 'geo_feature_id' . '}',
                ObjectSerializer::toPathValue($geoFeatureId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($marker)) {
            $_tempBody = $marker;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersPost
     *
     * Create a new marker in the given map. The response body contains the identifier of the created feature.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map where the  marker is to be created. (required)
     * @param  \Tracmap\Model\MarkerWrite $marker marker (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function accountsAccountIdMapsMapIdMarkersPost($accountId, $mapId, $marker)
    {
        list($response) = $this->accountsAccountIdMapsMapIdMarkersPostWithHttpInfo($accountId, $mapId, $marker);
        return $response;
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersPostWithHttpInfo
     *
     * Create a new marker in the given map. The response body contains the identifier of the created feature.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map where the  marker is to be created. (required)
     * @param  \Tracmap\Model\MarkerWrite $marker (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountIdMapsMapIdMarkersPostWithHttpInfo($accountId, $mapId, $marker)
    {
        $returnType = 'int';
        $request = $this->accountsAccountIdMapsMapIdMarkersPostRequest($accountId, $mapId, $marker);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersPostAsync
     *
     * Create a new marker in the given map. The response body contains the identifier of the created feature.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map where the  marker is to be created. (required)
     * @param  \Tracmap\Model\MarkerWrite $marker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdMarkersPostAsync($accountId, $mapId, $marker)
    {
        return $this->accountsAccountIdMapsMapIdMarkersPostAsyncWithHttpInfo($accountId, $mapId, $marker)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountIdMapsMapIdMarkersPostAsyncWithHttpInfo
     *
     * Create a new marker in the given map. The response body contains the identifier of the created feature.
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map where the  marker is to be created. (required)
     * @param  \Tracmap\Model\MarkerWrite $marker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountIdMapsMapIdMarkersPostAsyncWithHttpInfo($accountId, $mapId, $marker)
    {
        $returnType = 'int';
        $request = $this->accountsAccountIdMapsMapIdMarkersPostRequest($accountId, $mapId, $marker);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountIdMapsMapIdMarkersPost'
     *
     * @param  int $accountId Identifier of account with access to the map and marker. (required)
     * @param  int $mapId Identifier of map where the  marker is to be created. (required)
     * @param  \Tracmap\Model\MarkerWrite $marker (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsAccountIdMapsMapIdMarkersPostRequest($accountId, $mapId, $marker)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling accountsAccountIdMapsMapIdMarkersPost'
            );
        }
        if ($accountId < 1) {
            throw new \InvalidArgumentException('invalid value for "$accountId" when calling AppApi.accountsAccountIdMapsMapIdMarkersPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'mapId' is set
        if ($mapId === null || (is_array($mapId) && count($mapId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mapId when calling accountsAccountIdMapsMapIdMarkersPost'
            );
        }
        if ($mapId < 1) {
            throw new \InvalidArgumentException('invalid value for "$mapId" when calling AppApi.accountsAccountIdMapsMapIdMarkersPost, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marker' is set
        if ($marker === null || (is_array($marker) && count($marker) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marker when calling accountsAccountIdMapsMapIdMarkersPost'
            );
        }

        $resourcePath = '/accounts/{account_id}/maps/{map_id}/markers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($mapId !== null) {
            $resourcePath = str_replace(
                '{' . 'map_id' . '}',
                ObjectSerializer::toPathValue($mapId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($marker)) {
            $_tempBody = $marker;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsByUserGet
     *
     * List accounts available to the user.
     *
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\AccountReadFull[]
     */
    public function accountsByUserGet()
    {
        list($response) = $this->accountsByUserGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation accountsByUserGetWithHttpInfo
     *
     * List accounts available to the user.
     *
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\AccountReadFull[], HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsByUserGetWithHttpInfo()
    {
        $returnType = '\Tracmap\Model\AccountReadFull[]';
        $request = $this->accountsByUserGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\AccountReadFull[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsByUserGetAsync
     *
     * List accounts available to the user.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsByUserGetAsync()
    {
        return $this->accountsByUserGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsByUserGetAsyncWithHttpInfo
     *
     * List accounts available to the user.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsByUserGetAsyncWithHttpInfo()
    {
        $returnType = '\Tracmap\Model\AccountReadFull[]';
        $request = $this->accountsByUserGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsByUserGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountsByUserGetRequest()
    {

        $resourcePath = '/accounts_by_user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mobileUserAccessUserPhonePost
     *
     * Retrieve mobile app access token.
     *
     * @param  string $userPhone User mobile phone where to send authentication token. Must be the fully qualified phone number including international country code. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\MobileUserAccessRead
     */
    public function mobileUserAccessUserPhonePost($userPhone)
    {
        list($response) = $this->mobileUserAccessUserPhonePostWithHttpInfo($userPhone);
        return $response;
    }

    /**
     * Operation mobileUserAccessUserPhonePostWithHttpInfo
     *
     * Retrieve mobile app access token.
     *
     * @param  string $userPhone User mobile phone where to send authentication token. Must be the fully qualified phone number including international country code. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\MobileUserAccessRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function mobileUserAccessUserPhonePostWithHttpInfo($userPhone)
    {
        $returnType = '\Tracmap\Model\MobileUserAccessRead';
        $request = $this->mobileUserAccessUserPhonePostRequest($userPhone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\MobileUserAccessRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mobileUserAccessUserPhonePostAsync
     *
     * Retrieve mobile app access token.
     *
     * @param  string $userPhone User mobile phone where to send authentication token. Must be the fully qualified phone number including international country code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileUserAccessUserPhonePostAsync($userPhone)
    {
        return $this->mobileUserAccessUserPhonePostAsyncWithHttpInfo($userPhone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mobileUserAccessUserPhonePostAsyncWithHttpInfo
     *
     * Retrieve mobile app access token.
     *
     * @param  string $userPhone User mobile phone where to send authentication token. Must be the fully qualified phone number including international country code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileUserAccessUserPhonePostAsyncWithHttpInfo($userPhone)
    {
        $returnType = '\Tracmap\Model\MobileUserAccessRead';
        $request = $this->mobileUserAccessUserPhonePostRequest($userPhone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mobileUserAccessUserPhonePost'
     *
     * @param  string $userPhone User mobile phone where to send authentication token. Must be the fully qualified phone number including international country code. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mobileUserAccessUserPhonePostRequest($userPhone)
    {
        // verify the required parameter 'userPhone' is set
        if ($userPhone === null || (is_array($userPhone) && count($userPhone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userPhone when calling mobileUserAccessUserPhonePost'
            );
        }

        $resourcePath = '/mobile_user_access/{user_phone}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($userPhone !== null) {
            $resourcePath = str_replace(
                '{' . 'user_phone' . '}',
                ObjectSerializer::toPathValue($userPhone),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mobileUserNotificationsGet
     *
     * Retrieve notifications previously issued for this user.
     *
     * @param  string $accessToken The encoded user account access token. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Tracmap\Model\UserNotificationRead[]
     */
    public function mobileUserNotificationsGet($accessToken)
    {
        list($response) = $this->mobileUserNotificationsGetWithHttpInfo($accessToken);
        return $response;
    }

    /**
     * Operation mobileUserNotificationsGetWithHttpInfo
     *
     * Retrieve notifications previously issued for this user.
     *
     * @param  string $accessToken The encoded user account access token. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Tracmap\Model\UserNotificationRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function mobileUserNotificationsGetWithHttpInfo($accessToken)
    {
        $returnType = '\Tracmap\Model\UserNotificationRead[]';
        $request = $this->mobileUserNotificationsGetRequest($accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Tracmap\Model\UserNotificationRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mobileUserNotificationsGetAsync
     *
     * Retrieve notifications previously issued for this user.
     *
     * @param  string $accessToken The encoded user account access token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileUserNotificationsGetAsync($accessToken)
    {
        return $this->mobileUserNotificationsGetAsyncWithHttpInfo($accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mobileUserNotificationsGetAsyncWithHttpInfo
     *
     * Retrieve notifications previously issued for this user.
     *
     * @param  string $accessToken The encoded user account access token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileUserNotificationsGetAsyncWithHttpInfo($accessToken)
    {
        $returnType = '\Tracmap\Model\UserNotificationRead[]';
        $request = $this->mobileUserNotificationsGetRequest($accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mobileUserNotificationsGet'
     *
     * @param  string $accessToken The encoded user account access token. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mobileUserNotificationsGetRequest($accessToken)
    {
        // verify the required parameter 'accessToken' is set
        if ($accessToken === null || (is_array($accessToken) && count($accessToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accessToken when calling mobileUserNotificationsGet'
            );
        }

        $resourcePath = '/mobile_user_notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accessToken !== null) {
            $headerParams['access-token'] = ObjectSerializer::toHeaderValue($accessToken);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mobileUserNotificationsNotificationTokenDelete
     *
     * Delete a push notification token.
     *
     * @param  string $notificationToken The push notification token to use. The token will be used with the registered push notification service (Exponent). (required)
     * @param  string $accessToken The encoded user account access token originally retrieved from /register_mobile_app. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function mobileUserNotificationsNotificationTokenDelete($notificationToken, $accessToken)
    {
        $this->mobileUserNotificationsNotificationTokenDeleteWithHttpInfo($notificationToken, $accessToken);
    }

    /**
     * Operation mobileUserNotificationsNotificationTokenDeleteWithHttpInfo
     *
     * Delete a push notification token.
     *
     * @param  string $notificationToken The push notification token to use. The token will be used with the registered push notification service (Exponent). (required)
     * @param  string $accessToken The encoded user account access token originally retrieved from /register_mobile_app. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function mobileUserNotificationsNotificationTokenDeleteWithHttpInfo($notificationToken, $accessToken)
    {
        $returnType = '';
        $request = $this->mobileUserNotificationsNotificationTokenDeleteRequest($notificationToken, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation mobileUserNotificationsNotificationTokenDeleteAsync
     *
     * Delete a push notification token.
     *
     * @param  string $notificationToken The push notification token to use. The token will be used with the registered push notification service (Exponent). (required)
     * @param  string $accessToken The encoded user account access token originally retrieved from /register_mobile_app. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileUserNotificationsNotificationTokenDeleteAsync($notificationToken, $accessToken)
    {
        return $this->mobileUserNotificationsNotificationTokenDeleteAsyncWithHttpInfo($notificationToken, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mobileUserNotificationsNotificationTokenDeleteAsyncWithHttpInfo
     *
     * Delete a push notification token.
     *
     * @param  string $notificationToken The push notification token to use. The token will be used with the registered push notification service (Exponent). (required)
     * @param  string $accessToken The encoded user account access token originally retrieved from /register_mobile_app. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileUserNotificationsNotificationTokenDeleteAsyncWithHttpInfo($notificationToken, $accessToken)
    {
        $returnType = '';
        $request = $this->mobileUserNotificationsNotificationTokenDeleteRequest($notificationToken, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mobileUserNotificationsNotificationTokenDelete'
     *
     * @param  string $notificationToken The push notification token to use. The token will be used with the registered push notification service (Exponent). (required)
     * @param  string $accessToken The encoded user account access token originally retrieved from /register_mobile_app. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mobileUserNotificationsNotificationTokenDeleteRequest($notificationToken, $accessToken)
    {
        // verify the required parameter 'notificationToken' is set
        if ($notificationToken === null || (is_array($notificationToken) && count($notificationToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notificationToken when calling mobileUserNotificationsNotificationTokenDelete'
            );
        }
        // verify the required parameter 'accessToken' is set
        if ($accessToken === null || (is_array($accessToken) && count($accessToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accessToken when calling mobileUserNotificationsNotificationTokenDelete'
            );
        }

        $resourcePath = '/mobile_user_notifications/{notification_token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accessToken !== null) {
            $headerParams['access-token'] = ObjectSerializer::toHeaderValue($accessToken);
        }

        // path params
        if ($notificationToken !== null) {
            $resourcePath = str_replace(
                '{' . 'notification_token' . '}',
                ObjectSerializer::toPathValue($notificationToken),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mobileUserNotificationsNotificationTokenPost
     *
     * Register or refresh a push notification token.
     *
     * @param  string $notificationToken The push notification token to use. The token will be used with the registered push notification service (Exponent). (required)
     * @param  string $accessToken The encoded user account access token originally retrieved from /register_mobile_app. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function mobileUserNotificationsNotificationTokenPost($notificationToken, $accessToken)
    {
        $this->mobileUserNotificationsNotificationTokenPostWithHttpInfo($notificationToken, $accessToken);
    }

    /**
     * Operation mobileUserNotificationsNotificationTokenPostWithHttpInfo
     *
     * Register or refresh a push notification token.
     *
     * @param  string $notificationToken The push notification token to use. The token will be used with the registered push notification service (Exponent). (required)
     * @param  string $accessToken The encoded user account access token originally retrieved from /register_mobile_app. (required)
     *
     * @throws \Tracmap\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function mobileUserNotificationsNotificationTokenPostWithHttpInfo($notificationToken, $accessToken)
    {
        $returnType = '';
        $request = $this->mobileUserNotificationsNotificationTokenPostRequest($notificationToken, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation mobileUserNotificationsNotificationTokenPostAsync
     *
     * Register or refresh a push notification token.
     *
     * @param  string $notificationToken The push notification token to use. The token will be used with the registered push notification service (Exponent). (required)
     * @param  string $accessToken The encoded user account access token originally retrieved from /register_mobile_app. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileUserNotificationsNotificationTokenPostAsync($notificationToken, $accessToken)
    {
        return $this->mobileUserNotificationsNotificationTokenPostAsyncWithHttpInfo($notificationToken, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mobileUserNotificationsNotificationTokenPostAsyncWithHttpInfo
     *
     * Register or refresh a push notification token.
     *
     * @param  string $notificationToken The push notification token to use. The token will be used with the registered push notification service (Exponent). (required)
     * @param  string $accessToken The encoded user account access token originally retrieved from /register_mobile_app. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileUserNotificationsNotificationTokenPostAsyncWithHttpInfo($notificationToken, $accessToken)
    {
        $returnType = '';
        $request = $this->mobileUserNotificationsNotificationTokenPostRequest($notificationToken, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mobileUserNotificationsNotificationTokenPost'
     *
     * @param  string $notificationToken The push notification token to use. The token will be used with the registered push notification service (Exponent). (required)
     * @param  string $accessToken The encoded user account access token originally retrieved from /register_mobile_app. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mobileUserNotificationsNotificationTokenPostRequest($notificationToken, $accessToken)
    {
        // verify the required parameter 'notificationToken' is set
        if ($notificationToken === null || (is_array($notificationToken) && count($notificationToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notificationToken when calling mobileUserNotificationsNotificationTokenPost'
            );
        }
        // verify the required parameter 'accessToken' is set
        if ($accessToken === null || (is_array($accessToken) && count($accessToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accessToken when calling mobileUserNotificationsNotificationTokenPost'
            );
        }

        $resourcePath = '/mobile_user_notifications/{notification_token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accessToken !== null) {
            $headerParams['access-token'] = ObjectSerializer::toHeaderValue($accessToken);
        }

        // path params
        if ($notificationToken !== null) {
            $resourcePath = str_replace(
                '{' . 'notification_token' . '}',
                ObjectSerializer::toPathValue($notificationToken),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('hash');
        if ($apiKey !== null) {
            $headers['hash'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
